/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.TaskEvent;
import io.nomadproject.client.models.TaskHandle;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * TaskState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TaskState {
  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<TaskEvent> events = null;

  public static final String SERIALIZED_NAME_FAILED = "Failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Boolean failed;

  public static final String SERIALIZED_NAME_FINISHED_AT = "FinishedAt";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_LAST_RESTART = "LastRestart";
  @SerializedName(SERIALIZED_NAME_LAST_RESTART)
  private OffsetDateTime lastRestart;

  public static final String SERIALIZED_NAME_RESTARTS = "Restarts";
  @SerializedName(SERIALIZED_NAME_RESTARTS)
  private Integer restarts;

  public static final String SERIALIZED_NAME_STARTED_AT = "StartedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TASK_HANDLE = "TaskHandle";
  @SerializedName(SERIALIZED_NAME_TASK_HANDLE)
  private TaskHandle taskHandle;

  public TaskState() { 
  }

  public TaskState events(List<TaskEvent> events) {
    
    this.events = events;
    return this;
  }

  public TaskState addEventsItem(TaskEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TaskEvent> getEvents() {
    return events;
  }


  public void setEvents(List<TaskEvent> events) {
    this.events = events;
  }


  public TaskState failed(Boolean failed) {
    
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getFailed() {
    return failed;
  }


  public void setFailed(Boolean failed) {
    this.failed = failed;
  }


  public TaskState finishedAt(OffsetDateTime finishedAt) {
    
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * Get finishedAt
   * @return finishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }


  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }


  public TaskState lastRestart(OffsetDateTime lastRestart) {
    
    this.lastRestart = lastRestart;
    return this;
  }

   /**
   * Get lastRestart
   * @return lastRestart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastRestart() {
    return lastRestart;
  }


  public void setLastRestart(OffsetDateTime lastRestart) {
    this.lastRestart = lastRestart;
  }


  public TaskState restarts(Integer restarts) {
    
    this.restarts = restarts;
    return this;
  }

   /**
   * Get restarts
   * minimum: 0
   * maximum: 384
   * @return restarts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRestarts() {
    return restarts;
  }


  public void setRestarts(Integer restarts) {
    this.restarts = restarts;
  }


  public TaskState startedAt(OffsetDateTime startedAt) {
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public TaskState state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public TaskState taskHandle(TaskHandle taskHandle) {
    
    this.taskHandle = taskHandle;
    return this;
  }

   /**
   * Get taskHandle
   * @return taskHandle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaskHandle getTaskHandle() {
    return taskHandle;
  }


  public void setTaskHandle(TaskHandle taskHandle) {
    this.taskHandle = taskHandle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskState taskState = (TaskState) o;
    return Objects.equals(this.events, taskState.events) &&
        Objects.equals(this.failed, taskState.failed) &&
        Objects.equals(this.finishedAt, taskState.finishedAt) &&
        Objects.equals(this.lastRestart, taskState.lastRestart) &&
        Objects.equals(this.restarts, taskState.restarts) &&
        Objects.equals(this.startedAt, taskState.startedAt) &&
        Objects.equals(this.state, taskState.state) &&
        Objects.equals(this.taskHandle, taskState.taskHandle);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(events, failed, finishedAt, lastRestart, restarts, startedAt, state, taskHandle);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskState {\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    lastRestart: ").append(toIndentedString(lastRestart)).append("\n");
    sb.append("    restarts: ").append(toIndentedString(restarts)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    taskHandle: ").append(toIndentedString(taskHandle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Events");
    openapiFields.add("Failed");
    openapiFields.add("FinishedAt");
    openapiFields.add("LastRestart");
    openapiFields.add("Restarts");
    openapiFields.add("StartedAt");
    openapiFields.add("State");
    openapiFields.add("TaskHandle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaskState
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaskState.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskState is not found in the empty JSON string", TaskState.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaskState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskState` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("Events");
      if (jsonArrayevents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Events").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Events` to be an array in the JSON string but got `%s`", jsonObj.get("Events").toString()));
        }

        // validate the optional field `Events` (array)
        for (int i = 0; i < jsonArrayevents.size(); i++) {
          TaskEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the optional field `TaskHandle`
      if (jsonObj.getAsJsonObject("TaskHandle") != null) {
        TaskHandle.validateJsonObject(jsonObj.getAsJsonObject("TaskHandle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskState.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskState>() {
           @Override
           public void write(JsonWriter out, TaskState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskState read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskState given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskState
  * @throws IOException if the JSON string is invalid with respect to TaskState
  */
  public static TaskState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskState.class);
  }

 /**
  * Convert an instance of TaskState to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

