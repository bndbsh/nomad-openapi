/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.NetworkResource;
import io.nomadproject.client.models.RequestedDevice;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * Resources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Resources {
  public static final String SERIALIZED_NAME_C_P_U = "CPU";
  @SerializedName(SERIALIZED_NAME_C_P_U)
  private Integer CPU;

  public static final String SERIALIZED_NAME_CORES = "Cores";
  @SerializedName(SERIALIZED_NAME_CORES)
  private Integer cores;

  public static final String SERIALIZED_NAME_DEVICES = "Devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<RequestedDevice> devices = null;

  public static final String SERIALIZED_NAME_DISK_M_B = "DiskMB";
  @SerializedName(SERIALIZED_NAME_DISK_M_B)
  private Integer diskMB;

  public static final String SERIALIZED_NAME_I_O_P_S = "IOPS";
  @SerializedName(SERIALIZED_NAME_I_O_P_S)
  private Integer IOPS;

  public static final String SERIALIZED_NAME_MEMORY_M_B = "MemoryMB";
  @SerializedName(SERIALIZED_NAME_MEMORY_M_B)
  private Integer memoryMB;

  public static final String SERIALIZED_NAME_MEMORY_MAX_M_B = "MemoryMaxMB";
  @SerializedName(SERIALIZED_NAME_MEMORY_MAX_M_B)
  private Integer memoryMaxMB;

  public static final String SERIALIZED_NAME_NETWORKS = "Networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<NetworkResource> networks = null;

  public Resources() { 
  }

  public Resources CPU(Integer CPU) {
    
    this.CPU = CPU;
    return this;
  }

   /**
   * Get CPU
   * @return CPU
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCPU() {
    return CPU;
  }


  public void setCPU(Integer CPU) {
    this.CPU = CPU;
  }


  public Resources cores(Integer cores) {
    
    this.cores = cores;
    return this;
  }

   /**
   * Get cores
   * @return cores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCores() {
    return cores;
  }


  public void setCores(Integer cores) {
    this.cores = cores;
  }


  public Resources devices(List<RequestedDevice> devices) {
    
    this.devices = devices;
    return this;
  }

  public Resources addDevicesItem(RequestedDevice devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

   /**
   * Get devices
   * @return devices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RequestedDevice> getDevices() {
    return devices;
  }


  public void setDevices(List<RequestedDevice> devices) {
    this.devices = devices;
  }


  public Resources diskMB(Integer diskMB) {
    
    this.diskMB = diskMB;
    return this;
  }

   /**
   * Get diskMB
   * @return diskMB
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDiskMB() {
    return diskMB;
  }


  public void setDiskMB(Integer diskMB) {
    this.diskMB = diskMB;
  }


  public Resources IOPS(Integer IOPS) {
    
    this.IOPS = IOPS;
    return this;
  }

   /**
   * Get IOPS
   * @return IOPS
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getIOPS() {
    return IOPS;
  }


  public void setIOPS(Integer IOPS) {
    this.IOPS = IOPS;
  }


  public Resources memoryMB(Integer memoryMB) {
    
    this.memoryMB = memoryMB;
    return this;
  }

   /**
   * Get memoryMB
   * @return memoryMB
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMemoryMB() {
    return memoryMB;
  }


  public void setMemoryMB(Integer memoryMB) {
    this.memoryMB = memoryMB;
  }


  public Resources memoryMaxMB(Integer memoryMaxMB) {
    
    this.memoryMaxMB = memoryMaxMB;
    return this;
  }

   /**
   * Get memoryMaxMB
   * @return memoryMaxMB
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMemoryMaxMB() {
    return memoryMaxMB;
  }


  public void setMemoryMaxMB(Integer memoryMaxMB) {
    this.memoryMaxMB = memoryMaxMB;
  }


  public Resources networks(List<NetworkResource> networks) {
    
    this.networks = networks;
    return this;
  }

  public Resources addNetworksItem(NetworkResource networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

   /**
   * Get networks
   * @return networks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NetworkResource> getNetworks() {
    return networks;
  }


  public void setNetworks(List<NetworkResource> networks) {
    this.networks = networks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resources resources = (Resources) o;
    return Objects.equals(this.CPU, resources.CPU) &&
        Objects.equals(this.cores, resources.cores) &&
        Objects.equals(this.devices, resources.devices) &&
        Objects.equals(this.diskMB, resources.diskMB) &&
        Objects.equals(this.IOPS, resources.IOPS) &&
        Objects.equals(this.memoryMB, resources.memoryMB) &&
        Objects.equals(this.memoryMaxMB, resources.memoryMaxMB) &&
        Objects.equals(this.networks, resources.networks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CPU, cores, devices, diskMB, IOPS, memoryMB, memoryMaxMB, networks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resources {\n");
    sb.append("    CPU: ").append(toIndentedString(CPU)).append("\n");
    sb.append("    cores: ").append(toIndentedString(cores)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    diskMB: ").append(toIndentedString(diskMB)).append("\n");
    sb.append("    IOPS: ").append(toIndentedString(IOPS)).append("\n");
    sb.append("    memoryMB: ").append(toIndentedString(memoryMB)).append("\n");
    sb.append("    memoryMaxMB: ").append(toIndentedString(memoryMaxMB)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CPU");
    openapiFields.add("Cores");
    openapiFields.add("Devices");
    openapiFields.add("DiskMB");
    openapiFields.add("IOPS");
    openapiFields.add("MemoryMB");
    openapiFields.add("MemoryMaxMB");
    openapiFields.add("Networks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Resources
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Resources.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resources is not found in the empty JSON string", Resources.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Resources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resources` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraydevices = jsonObj.getAsJsonArray("Devices");
      if (jsonArraydevices != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Devices").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Devices` to be an array in the JSON string but got `%s`", jsonObj.get("Devices").toString()));
        }

        // validate the optional field `Devices` (array)
        for (int i = 0; i < jsonArraydevices.size(); i++) {
          RequestedDevice.validateJsonObject(jsonArraydevices.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("Networks");
      if (jsonArraynetworks != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Networks").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Networks` to be an array in the JSON string but got `%s`", jsonObj.get("Networks").toString()));
        }

        // validate the optional field `Networks` (array)
        for (int i = 0; i < jsonArraynetworks.size(); i++) {
          NetworkResource.validateJsonObject(jsonArraynetworks.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resources.class));

       return (TypeAdapter<T>) new TypeAdapter<Resources>() {
           @Override
           public void write(JsonWriter out, Resources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resources read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Resources given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Resources
  * @throws IOException if the JSON string is invalid with respect to Resources
  */
  public static Resources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resources.class);
  }

 /**
  * Convert an instance of Resources to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

