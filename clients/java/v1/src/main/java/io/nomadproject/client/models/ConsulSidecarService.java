/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.ConsulProxy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * ConsulSidecarService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConsulSidecarService {
  public static final String SERIALIZED_NAME_DISABLE_DEFAULT_T_C_P_CHECK = "DisableDefaultTCPCheck";
  @SerializedName(SERIALIZED_NAME_DISABLE_DEFAULT_T_C_P_CHECK)
  private Boolean disableDefaultTCPCheck;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_PROXY = "Proxy";
  @SerializedName(SERIALIZED_NAME_PROXY)
  private ConsulProxy proxy;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public ConsulSidecarService() { 
  }

  public ConsulSidecarService disableDefaultTCPCheck(Boolean disableDefaultTCPCheck) {
    
    this.disableDefaultTCPCheck = disableDefaultTCPCheck;
    return this;
  }

   /**
   * Get disableDefaultTCPCheck
   * @return disableDefaultTCPCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDisableDefaultTCPCheck() {
    return disableDefaultTCPCheck;
  }


  public void setDisableDefaultTCPCheck(Boolean disableDefaultTCPCheck) {
    this.disableDefaultTCPCheck = disableDefaultTCPCheck;
  }


  public ConsulSidecarService port(String port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPort() {
    return port;
  }


  public void setPort(String port) {
    this.port = port;
  }


  public ConsulSidecarService proxy(ConsulProxy proxy) {
    
    this.proxy = proxy;
    return this;
  }

   /**
   * Get proxy
   * @return proxy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConsulProxy getProxy() {
    return proxy;
  }


  public void setProxy(ConsulProxy proxy) {
    this.proxy = proxy;
  }


  public ConsulSidecarService tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public ConsulSidecarService addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsulSidecarService consulSidecarService = (ConsulSidecarService) o;
    return Objects.equals(this.disableDefaultTCPCheck, consulSidecarService.disableDefaultTCPCheck) &&
        Objects.equals(this.port, consulSidecarService.port) &&
        Objects.equals(this.proxy, consulSidecarService.proxy) &&
        Objects.equals(this.tags, consulSidecarService.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableDefaultTCPCheck, port, proxy, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsulSidecarService {\n");
    sb.append("    disableDefaultTCPCheck: ").append(toIndentedString(disableDefaultTCPCheck)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DisableDefaultTCPCheck");
    openapiFields.add("Port");
    openapiFields.add("Proxy");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConsulSidecarService
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConsulSidecarService.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsulSidecarService is not found in the empty JSON string", ConsulSidecarService.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConsulSidecarService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsulSidecarService` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Port").toString()));
      }
      // validate the optional field `Proxy`
      if (jsonObj.getAsJsonObject("Proxy") != null) {
        ConsulProxy.validateJsonObject(jsonObj.getAsJsonObject("Proxy"));
      }
      // ensure the json data is an array
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsulSidecarService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsulSidecarService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsulSidecarService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsulSidecarService.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsulSidecarService>() {
           @Override
           public void write(JsonWriter out, ConsulSidecarService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsulSidecarService read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsulSidecarService given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsulSidecarService
  * @throws IOException if the JSON string is invalid with respect to ConsulSidecarService
  */
  public static ConsulSidecarService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsulSidecarService.class);
  }

 /**
  * Convert an instance of ConsulSidecarService to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

