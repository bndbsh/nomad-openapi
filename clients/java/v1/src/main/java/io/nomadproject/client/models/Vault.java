/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * Vault
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Vault {
  public static final String SERIALIZED_NAME_CHANGE_MODE = "ChangeMode";
  @SerializedName(SERIALIZED_NAME_CHANGE_MODE)
  private String changeMode;

  public static final String SERIALIZED_NAME_CHANGE_SIGNAL = "ChangeSignal";
  @SerializedName(SERIALIZED_NAME_CHANGE_SIGNAL)
  private String changeSignal;

  public static final String SERIALIZED_NAME_ENV = "Env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private Boolean env;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_POLICIES = "Policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<String> policies = null;

  public Vault() { 
  }

  public Vault changeMode(String changeMode) {
    
    this.changeMode = changeMode;
    return this;
  }

   /**
   * Get changeMode
   * @return changeMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChangeMode() {
    return changeMode;
  }


  public void setChangeMode(String changeMode) {
    this.changeMode = changeMode;
  }


  public Vault changeSignal(String changeSignal) {
    
    this.changeSignal = changeSignal;
    return this;
  }

   /**
   * Get changeSignal
   * @return changeSignal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChangeSignal() {
    return changeSignal;
  }


  public void setChangeSignal(String changeSignal) {
    this.changeSignal = changeSignal;
  }


  public Vault env(Boolean env) {
    
    this.env = env;
    return this;
  }

   /**
   * Get env
   * @return env
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnv() {
    return env;
  }


  public void setEnv(Boolean env) {
    this.env = env;
  }


  public Vault namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public Vault policies(List<String> policies) {
    
    this.policies = policies;
    return this;
  }

  public Vault addPoliciesItem(String policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getPolicies() {
    return policies;
  }


  public void setPolicies(List<String> policies) {
    this.policies = policies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vault vault = (Vault) o;
    return Objects.equals(this.changeMode, vault.changeMode) &&
        Objects.equals(this.changeSignal, vault.changeSignal) &&
        Objects.equals(this.env, vault.env) &&
        Objects.equals(this.namespace, vault.namespace) &&
        Objects.equals(this.policies, vault.policies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeMode, changeSignal, env, namespace, policies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vault {\n");
    sb.append("    changeMode: ").append(toIndentedString(changeMode)).append("\n");
    sb.append("    changeSignal: ").append(toIndentedString(changeSignal)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChangeMode");
    openapiFields.add("ChangeSignal");
    openapiFields.add("Env");
    openapiFields.add("Namespace");
    openapiFields.add("Policies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Vault
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Vault.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vault is not found in the empty JSON string", Vault.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Vault.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vault` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ChangeMode") != null && !jsonObj.get("ChangeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChangeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChangeMode").toString()));
      }
      if (jsonObj.get("ChangeSignal") != null && !jsonObj.get("ChangeSignal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChangeSignal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChangeSignal").toString()));
      }
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Namespace").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("Policies") != null && !jsonObj.get("Policies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Policies` to be an array in the JSON string but got `%s`", jsonObj.get("Policies").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vault.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vault' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vault> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vault.class));

       return (TypeAdapter<T>) new TypeAdapter<Vault>() {
           @Override
           public void write(JsonWriter out, Vault value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vault read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Vault given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Vault
  * @throws IOException if the JSON string is invalid with respect to Vault
  */
  public static Vault fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vault.class);
  }

 /**
  * Convert an instance of Vault to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

