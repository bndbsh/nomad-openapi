/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.ScalingEvent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * TaskGroupScaleStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TaskGroupScaleStatus {
  public static final String SERIALIZED_NAME_DESIRED = "Desired";
  @SerializedName(SERIALIZED_NAME_DESIRED)
  private Integer desired;

  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<ScalingEvent> events = null;

  public static final String SERIALIZED_NAME_HEALTHY = "Healthy";
  @SerializedName(SERIALIZED_NAME_HEALTHY)
  private Integer healthy;

  public static final String SERIALIZED_NAME_PLACED = "Placed";
  @SerializedName(SERIALIZED_NAME_PLACED)
  private Integer placed;

  public static final String SERIALIZED_NAME_RUNNING = "Running";
  @SerializedName(SERIALIZED_NAME_RUNNING)
  private Integer running;

  public static final String SERIALIZED_NAME_UNHEALTHY = "Unhealthy";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY)
  private Integer unhealthy;

  public TaskGroupScaleStatus() { 
  }

  public TaskGroupScaleStatus desired(Integer desired) {
    
    this.desired = desired;
    return this;
  }

   /**
   * Get desired
   * @return desired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDesired() {
    return desired;
  }


  public void setDesired(Integer desired) {
    this.desired = desired;
  }


  public TaskGroupScaleStatus events(List<ScalingEvent> events) {
    
    this.events = events;
    return this;
  }

  public TaskGroupScaleStatus addEventsItem(ScalingEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScalingEvent> getEvents() {
    return events;
  }


  public void setEvents(List<ScalingEvent> events) {
    this.events = events;
  }


  public TaskGroupScaleStatus healthy(Integer healthy) {
    
    this.healthy = healthy;
    return this;
  }

   /**
   * Get healthy
   * @return healthy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getHealthy() {
    return healthy;
  }


  public void setHealthy(Integer healthy) {
    this.healthy = healthy;
  }


  public TaskGroupScaleStatus placed(Integer placed) {
    
    this.placed = placed;
    return this;
  }

   /**
   * Get placed
   * @return placed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPlaced() {
    return placed;
  }


  public void setPlaced(Integer placed) {
    this.placed = placed;
  }


  public TaskGroupScaleStatus running(Integer running) {
    
    this.running = running;
    return this;
  }

   /**
   * Get running
   * @return running
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRunning() {
    return running;
  }


  public void setRunning(Integer running) {
    this.running = running;
  }


  public TaskGroupScaleStatus unhealthy(Integer unhealthy) {
    
    this.unhealthy = unhealthy;
    return this;
  }

   /**
   * Get unhealthy
   * @return unhealthy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUnhealthy() {
    return unhealthy;
  }


  public void setUnhealthy(Integer unhealthy) {
    this.unhealthy = unhealthy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskGroupScaleStatus taskGroupScaleStatus = (TaskGroupScaleStatus) o;
    return Objects.equals(this.desired, taskGroupScaleStatus.desired) &&
        Objects.equals(this.events, taskGroupScaleStatus.events) &&
        Objects.equals(this.healthy, taskGroupScaleStatus.healthy) &&
        Objects.equals(this.placed, taskGroupScaleStatus.placed) &&
        Objects.equals(this.running, taskGroupScaleStatus.running) &&
        Objects.equals(this.unhealthy, taskGroupScaleStatus.unhealthy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(desired, events, healthy, placed, running, unhealthy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskGroupScaleStatus {\n");
    sb.append("    desired: ").append(toIndentedString(desired)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    placed: ").append(toIndentedString(placed)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    unhealthy: ").append(toIndentedString(unhealthy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Desired");
    openapiFields.add("Events");
    openapiFields.add("Healthy");
    openapiFields.add("Placed");
    openapiFields.add("Running");
    openapiFields.add("Unhealthy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaskGroupScaleStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaskGroupScaleStatus.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskGroupScaleStatus is not found in the empty JSON string", TaskGroupScaleStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaskGroupScaleStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskGroupScaleStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("Events");
      if (jsonArrayevents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Events").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Events` to be an array in the JSON string but got `%s`", jsonObj.get("Events").toString()));
        }

        // validate the optional field `Events` (array)
        for (int i = 0; i < jsonArrayevents.size(); i++) {
          ScalingEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskGroupScaleStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskGroupScaleStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskGroupScaleStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskGroupScaleStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskGroupScaleStatus>() {
           @Override
           public void write(JsonWriter out, TaskGroupScaleStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskGroupScaleStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskGroupScaleStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskGroupScaleStatus
  * @throws IOException if the JSON string is invalid with respect to TaskGroupScaleStatus
  */
  public static TaskGroupScaleStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskGroupScaleStatus.class);
  }

 /**
  * Convert an instance of TaskGroupScaleStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

