/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.JobSummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * JobListStub
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class JobListStub {
  public static final String SERIALIZED_NAME_CREATE_INDEX = "CreateIndex";
  @SerializedName(SERIALIZED_NAME_CREATE_INDEX)
  private Integer createIndex;

  public static final String SERIALIZED_NAME_DATACENTERS = "Datacenters";
  @SerializedName(SERIALIZED_NAME_DATACENTERS)
  private List<String> datacenters = null;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_JOB_MODIFY_INDEX = "JobModifyIndex";
  @SerializedName(SERIALIZED_NAME_JOB_MODIFY_INDEX)
  private Integer jobModifyIndex;

  public static final String SERIALIZED_NAME_JOB_SUMMARY = "JobSummary";
  @SerializedName(SERIALIZED_NAME_JOB_SUMMARY)
  private JobSummary jobSummary;

  public static final String SERIALIZED_NAME_MODIFY_INDEX = "ModifyIndex";
  @SerializedName(SERIALIZED_NAME_MODIFY_INDEX)
  private Integer modifyIndex;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_PARAMETERIZED_JOB = "ParameterizedJob";
  @SerializedName(SERIALIZED_NAME_PARAMETERIZED_JOB)
  private Boolean parameterizedJob;

  public static final String SERIALIZED_NAME_PARENT_I_D = "ParentID";
  @SerializedName(SERIALIZED_NAME_PARENT_I_D)
  private String parentID;

  public static final String SERIALIZED_NAME_PERIODIC = "Periodic";
  @SerializedName(SERIALIZED_NAME_PERIODIC)
  private Boolean periodic;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "StatusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_STOP = "Stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private Boolean stop;

  public static final String SERIALIZED_NAME_SUBMIT_TIME = "SubmitTime";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME)
  private Long submitTime;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public JobListStub() { 
  }

  public JobListStub createIndex(Integer createIndex) {
    
    this.createIndex = createIndex;
    return this;
  }

   /**
   * Get createIndex
   * minimum: 0
   * maximum: 384
   * @return createIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreateIndex() {
    return createIndex;
  }


  public void setCreateIndex(Integer createIndex) {
    this.createIndex = createIndex;
  }


  public JobListStub datacenters(List<String> datacenters) {
    
    this.datacenters = datacenters;
    return this;
  }

  public JobListStub addDatacentersItem(String datacentersItem) {
    if (this.datacenters == null) {
      this.datacenters = new ArrayList<>();
    }
    this.datacenters.add(datacentersItem);
    return this;
  }

   /**
   * Get datacenters
   * @return datacenters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDatacenters() {
    return datacenters;
  }


  public void setDatacenters(List<String> datacenters) {
    this.datacenters = datacenters;
  }


  public JobListStub ID(String ID) {
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getID() {
    return ID;
  }


  public void setID(String ID) {
    this.ID = ID;
  }


  public JobListStub jobModifyIndex(Integer jobModifyIndex) {
    
    this.jobModifyIndex = jobModifyIndex;
    return this;
  }

   /**
   * Get jobModifyIndex
   * minimum: 0
   * maximum: 384
   * @return jobModifyIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getJobModifyIndex() {
    return jobModifyIndex;
  }


  public void setJobModifyIndex(Integer jobModifyIndex) {
    this.jobModifyIndex = jobModifyIndex;
  }


  public JobListStub jobSummary(JobSummary jobSummary) {
    
    this.jobSummary = jobSummary;
    return this;
  }

   /**
   * Get jobSummary
   * @return jobSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobSummary getJobSummary() {
    return jobSummary;
  }


  public void setJobSummary(JobSummary jobSummary) {
    this.jobSummary = jobSummary;
  }


  public JobListStub modifyIndex(Integer modifyIndex) {
    
    this.modifyIndex = modifyIndex;
    return this;
  }

   /**
   * Get modifyIndex
   * minimum: 0
   * maximum: 384
   * @return modifyIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getModifyIndex() {
    return modifyIndex;
  }


  public void setModifyIndex(Integer modifyIndex) {
    this.modifyIndex = modifyIndex;
  }


  public JobListStub name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public JobListStub namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public JobListStub parameterizedJob(Boolean parameterizedJob) {
    
    this.parameterizedJob = parameterizedJob;
    return this;
  }

   /**
   * Get parameterizedJob
   * @return parameterizedJob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getParameterizedJob() {
    return parameterizedJob;
  }


  public void setParameterizedJob(Boolean parameterizedJob) {
    this.parameterizedJob = parameterizedJob;
  }


  public JobListStub parentID(String parentID) {
    
    this.parentID = parentID;
    return this;
  }

   /**
   * Get parentID
   * @return parentID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParentID() {
    return parentID;
  }


  public void setParentID(String parentID) {
    this.parentID = parentID;
  }


  public JobListStub periodic(Boolean periodic) {
    
    this.periodic = periodic;
    return this;
  }

   /**
   * Get periodic
   * @return periodic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPeriodic() {
    return periodic;
  }


  public void setPeriodic(Boolean periodic) {
    this.periodic = periodic;
  }


  public JobListStub priority(Integer priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public JobListStub status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public JobListStub statusDescription(String statusDescription) {
    
    this.statusDescription = statusDescription;
    return this;
  }

   /**
   * Get statusDescription
   * @return statusDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatusDescription() {
    return statusDescription;
  }


  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public JobListStub stop(Boolean stop) {
    
    this.stop = stop;
    return this;
  }

   /**
   * Get stop
   * @return stop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getStop() {
    return stop;
  }


  public void setStop(Boolean stop) {
    this.stop = stop;
  }


  public JobListStub submitTime(Long submitTime) {
    
    this.submitTime = submitTime;
    return this;
  }

   /**
   * Get submitTime
   * @return submitTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getSubmitTime() {
    return submitTime;
  }


  public void setSubmitTime(Long submitTime) {
    this.submitTime = submitTime;
  }


  public JobListStub type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobListStub jobListStub = (JobListStub) o;
    return Objects.equals(this.createIndex, jobListStub.createIndex) &&
        Objects.equals(this.datacenters, jobListStub.datacenters) &&
        Objects.equals(this.ID, jobListStub.ID) &&
        Objects.equals(this.jobModifyIndex, jobListStub.jobModifyIndex) &&
        Objects.equals(this.jobSummary, jobListStub.jobSummary) &&
        Objects.equals(this.modifyIndex, jobListStub.modifyIndex) &&
        Objects.equals(this.name, jobListStub.name) &&
        Objects.equals(this.namespace, jobListStub.namespace) &&
        Objects.equals(this.parameterizedJob, jobListStub.parameterizedJob) &&
        Objects.equals(this.parentID, jobListStub.parentID) &&
        Objects.equals(this.periodic, jobListStub.periodic) &&
        Objects.equals(this.priority, jobListStub.priority) &&
        Objects.equals(this.status, jobListStub.status) &&
        Objects.equals(this.statusDescription, jobListStub.statusDescription) &&
        Objects.equals(this.stop, jobListStub.stop) &&
        Objects.equals(this.submitTime, jobListStub.submitTime) &&
        Objects.equals(this.type, jobListStub.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createIndex, datacenters, ID, jobModifyIndex, jobSummary, modifyIndex, name, namespace, parameterizedJob, parentID, periodic, priority, status, statusDescription, stop, submitTime, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobListStub {\n");
    sb.append("    createIndex: ").append(toIndentedString(createIndex)).append("\n");
    sb.append("    datacenters: ").append(toIndentedString(datacenters)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    jobModifyIndex: ").append(toIndentedString(jobModifyIndex)).append("\n");
    sb.append("    jobSummary: ").append(toIndentedString(jobSummary)).append("\n");
    sb.append("    modifyIndex: ").append(toIndentedString(modifyIndex)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    parameterizedJob: ").append(toIndentedString(parameterizedJob)).append("\n");
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    periodic: ").append(toIndentedString(periodic)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    submitTime: ").append(toIndentedString(submitTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreateIndex");
    openapiFields.add("Datacenters");
    openapiFields.add("ID");
    openapiFields.add("JobModifyIndex");
    openapiFields.add("JobSummary");
    openapiFields.add("ModifyIndex");
    openapiFields.add("Name");
    openapiFields.add("Namespace");
    openapiFields.add("ParameterizedJob");
    openapiFields.add("ParentID");
    openapiFields.add("Periodic");
    openapiFields.add("Priority");
    openapiFields.add("Status");
    openapiFields.add("StatusDescription");
    openapiFields.add("Stop");
    openapiFields.add("SubmitTime");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobListStub
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (JobListStub.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobListStub is not found in the empty JSON string", JobListStub.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JobListStub.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobListStub` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("Datacenters") != null && !jsonObj.get("Datacenters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Datacenters` to be an array in the JSON string but got `%s`", jsonObj.get("Datacenters").toString()));
      }
      if (jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      // validate the optional field `JobSummary`
      if (jsonObj.getAsJsonObject("JobSummary") != null) {
        JobSummary.validateJsonObject(jsonObj.getAsJsonObject("JobSummary"));
      }
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Namespace").toString()));
      }
      if (jsonObj.get("ParentID") != null && !jsonObj.get("ParentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentID").toString()));
      }
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if (jsonObj.get("StatusDescription") != null && !jsonObj.get("StatusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusDescription").toString()));
      }
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobListStub.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobListStub' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobListStub> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobListStub.class));

       return (TypeAdapter<T>) new TypeAdapter<JobListStub>() {
           @Override
           public void write(JsonWriter out, JobListStub value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobListStub read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobListStub given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobListStub
  * @throws IOException if the JSON string is invalid with respect to JobListStub
  */
  public static JobListStub fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobListStub.class);
  }

 /**
  * Convert an instance of JobListStub to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

