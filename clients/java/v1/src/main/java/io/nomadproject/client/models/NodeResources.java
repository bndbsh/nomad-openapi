/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.NetworkResource;
import io.nomadproject.client.models.NodeCpuResources;
import io.nomadproject.client.models.NodeDeviceResource;
import io.nomadproject.client.models.NodeDiskResources;
import io.nomadproject.client.models.NodeMemoryResources;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * NodeResources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NodeResources {
  public static final String SERIALIZED_NAME_CPU = "Cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private NodeCpuResources cpu;

  public static final String SERIALIZED_NAME_DEVICES = "Devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<NodeDeviceResource> devices = null;

  public static final String SERIALIZED_NAME_DISK = "Disk";
  @SerializedName(SERIALIZED_NAME_DISK)
  private NodeDiskResources disk;

  public static final String SERIALIZED_NAME_MAX_DYNAMIC_PORT = "MaxDynamicPort";
  @SerializedName(SERIALIZED_NAME_MAX_DYNAMIC_PORT)
  private Integer maxDynamicPort;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private NodeMemoryResources memory;

  public static final String SERIALIZED_NAME_MIN_DYNAMIC_PORT = "MinDynamicPort";
  @SerializedName(SERIALIZED_NAME_MIN_DYNAMIC_PORT)
  private Integer minDynamicPort;

  public static final String SERIALIZED_NAME_NETWORKS = "Networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<NetworkResource> networks = null;

  public NodeResources() { 
  }

  public NodeResources cpu(NodeCpuResources cpu) {
    
    this.cpu = cpu;
    return this;
  }

   /**
   * Get cpu
   * @return cpu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeCpuResources getCpu() {
    return cpu;
  }


  public void setCpu(NodeCpuResources cpu) {
    this.cpu = cpu;
  }


  public NodeResources devices(List<NodeDeviceResource> devices) {
    
    this.devices = devices;
    return this;
  }

  public NodeResources addDevicesItem(NodeDeviceResource devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

   /**
   * Get devices
   * @return devices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NodeDeviceResource> getDevices() {
    return devices;
  }


  public void setDevices(List<NodeDeviceResource> devices) {
    this.devices = devices;
  }


  public NodeResources disk(NodeDiskResources disk) {
    
    this.disk = disk;
    return this;
  }

   /**
   * Get disk
   * @return disk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeDiskResources getDisk() {
    return disk;
  }


  public void setDisk(NodeDiskResources disk) {
    this.disk = disk;
  }


  public NodeResources maxDynamicPort(Integer maxDynamicPort) {
    
    this.maxDynamicPort = maxDynamicPort;
    return this;
  }

   /**
   * Get maxDynamicPort
   * @return maxDynamicPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxDynamicPort() {
    return maxDynamicPort;
  }


  public void setMaxDynamicPort(Integer maxDynamicPort) {
    this.maxDynamicPort = maxDynamicPort;
  }


  public NodeResources memory(NodeMemoryResources memory) {
    
    this.memory = memory;
    return this;
  }

   /**
   * Get memory
   * @return memory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeMemoryResources getMemory() {
    return memory;
  }


  public void setMemory(NodeMemoryResources memory) {
    this.memory = memory;
  }


  public NodeResources minDynamicPort(Integer minDynamicPort) {
    
    this.minDynamicPort = minDynamicPort;
    return this;
  }

   /**
   * Get minDynamicPort
   * @return minDynamicPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMinDynamicPort() {
    return minDynamicPort;
  }


  public void setMinDynamicPort(Integer minDynamicPort) {
    this.minDynamicPort = minDynamicPort;
  }


  public NodeResources networks(List<NetworkResource> networks) {
    
    this.networks = networks;
    return this;
  }

  public NodeResources addNetworksItem(NetworkResource networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

   /**
   * Get networks
   * @return networks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NetworkResource> getNetworks() {
    return networks;
  }


  public void setNetworks(List<NetworkResource> networks) {
    this.networks = networks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeResources nodeResources = (NodeResources) o;
    return Objects.equals(this.cpu, nodeResources.cpu) &&
        Objects.equals(this.devices, nodeResources.devices) &&
        Objects.equals(this.disk, nodeResources.disk) &&
        Objects.equals(this.maxDynamicPort, nodeResources.maxDynamicPort) &&
        Objects.equals(this.memory, nodeResources.memory) &&
        Objects.equals(this.minDynamicPort, nodeResources.minDynamicPort) &&
        Objects.equals(this.networks, nodeResources.networks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpu, devices, disk, maxDynamicPort, memory, minDynamicPort, networks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeResources {\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
    sb.append("    maxDynamicPort: ").append(toIndentedString(maxDynamicPort)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    minDynamicPort: ").append(toIndentedString(minDynamicPort)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Cpu");
    openapiFields.add("Devices");
    openapiFields.add("Disk");
    openapiFields.add("MaxDynamicPort");
    openapiFields.add("Memory");
    openapiFields.add("MinDynamicPort");
    openapiFields.add("Networks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NodeResources
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (NodeResources.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeResources is not found in the empty JSON string", NodeResources.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NodeResources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeResources` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `Cpu`
      if (jsonObj.getAsJsonObject("Cpu") != null) {
        NodeCpuResources.validateJsonObject(jsonObj.getAsJsonObject("Cpu"));
      }
      JsonArray jsonArraydevices = jsonObj.getAsJsonArray("Devices");
      if (jsonArraydevices != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Devices").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Devices` to be an array in the JSON string but got `%s`", jsonObj.get("Devices").toString()));
        }

        // validate the optional field `Devices` (array)
        for (int i = 0; i < jsonArraydevices.size(); i++) {
          NodeDeviceResource.validateJsonObject(jsonArraydevices.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `Disk`
      if (jsonObj.getAsJsonObject("Disk") != null) {
        NodeDiskResources.validateJsonObject(jsonObj.getAsJsonObject("Disk"));
      }
      // validate the optional field `Memory`
      if (jsonObj.getAsJsonObject("Memory") != null) {
        NodeMemoryResources.validateJsonObject(jsonObj.getAsJsonObject("Memory"));
      }
      JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("Networks");
      if (jsonArraynetworks != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Networks").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Networks` to be an array in the JSON string but got `%s`", jsonObj.get("Networks").toString()));
        }

        // validate the optional field `Networks` (array)
        for (int i = 0; i < jsonArraynetworks.size(); i++) {
          NetworkResource.validateJsonObject(jsonArraynetworks.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeResources.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeResources>() {
           @Override
           public void write(JsonWriter out, NodeResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeResources read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NodeResources given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NodeResources
  * @throws IOException if the JSON string is invalid with respect to NodeResources
  */
  public static NodeResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeResources.class);
  }

 /**
  * Convert an instance of NodeResources to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

