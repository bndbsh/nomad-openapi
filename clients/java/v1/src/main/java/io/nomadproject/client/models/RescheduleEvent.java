/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * RescheduleEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RescheduleEvent {
  public static final String SERIALIZED_NAME_PREV_ALLOC_I_D = "PrevAllocID";
  @SerializedName(SERIALIZED_NAME_PREV_ALLOC_I_D)
  private String prevAllocID;

  public static final String SERIALIZED_NAME_PREV_NODE_I_D = "PrevNodeID";
  @SerializedName(SERIALIZED_NAME_PREV_NODE_I_D)
  private String prevNodeID;

  public static final String SERIALIZED_NAME_RESCHEDULE_TIME = "RescheduleTime";
  @SerializedName(SERIALIZED_NAME_RESCHEDULE_TIME)
  private Long rescheduleTime;

  public RescheduleEvent() { 
  }

  public RescheduleEvent prevAllocID(String prevAllocID) {
    
    this.prevAllocID = prevAllocID;
    return this;
  }

   /**
   * Get prevAllocID
   * @return prevAllocID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrevAllocID() {
    return prevAllocID;
  }


  public void setPrevAllocID(String prevAllocID) {
    this.prevAllocID = prevAllocID;
  }


  public RescheduleEvent prevNodeID(String prevNodeID) {
    
    this.prevNodeID = prevNodeID;
    return this;
  }

   /**
   * Get prevNodeID
   * @return prevNodeID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrevNodeID() {
    return prevNodeID;
  }


  public void setPrevNodeID(String prevNodeID) {
    this.prevNodeID = prevNodeID;
  }


  public RescheduleEvent rescheduleTime(Long rescheduleTime) {
    
    this.rescheduleTime = rescheduleTime;
    return this;
  }

   /**
   * Get rescheduleTime
   * @return rescheduleTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getRescheduleTime() {
    return rescheduleTime;
  }


  public void setRescheduleTime(Long rescheduleTime) {
    this.rescheduleTime = rescheduleTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RescheduleEvent rescheduleEvent = (RescheduleEvent) o;
    return Objects.equals(this.prevAllocID, rescheduleEvent.prevAllocID) &&
        Objects.equals(this.prevNodeID, rescheduleEvent.prevNodeID) &&
        Objects.equals(this.rescheduleTime, rescheduleEvent.rescheduleTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prevAllocID, prevNodeID, rescheduleTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RescheduleEvent {\n");
    sb.append("    prevAllocID: ").append(toIndentedString(prevAllocID)).append("\n");
    sb.append("    prevNodeID: ").append(toIndentedString(prevNodeID)).append("\n");
    sb.append("    rescheduleTime: ").append(toIndentedString(rescheduleTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PrevAllocID");
    openapiFields.add("PrevNodeID");
    openapiFields.add("RescheduleTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RescheduleEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RescheduleEvent.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RescheduleEvent is not found in the empty JSON string", RescheduleEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RescheduleEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RescheduleEvent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("PrevAllocID") != null && !jsonObj.get("PrevAllocID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrevAllocID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrevAllocID").toString()));
      }
      if (jsonObj.get("PrevNodeID") != null && !jsonObj.get("PrevNodeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrevNodeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrevNodeID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RescheduleEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RescheduleEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RescheduleEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RescheduleEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<RescheduleEvent>() {
           @Override
           public void write(JsonWriter out, RescheduleEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RescheduleEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RescheduleEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RescheduleEvent
  * @throws IOException if the JSON string is invalid with respect to RescheduleEvent
  */
  public static RescheduleEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RescheduleEvent.class);
  }

 /**
  * Convert an instance of RescheduleEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

