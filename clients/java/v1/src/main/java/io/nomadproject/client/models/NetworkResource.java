/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.DNSConfig;
import io.nomadproject.client.models.Port;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * NetworkResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NetworkResource {
  public static final String SERIALIZED_NAME_C_I_D_R = "CIDR";
  @SerializedName(SERIALIZED_NAME_C_I_D_R)
  private String CIDR;

  public static final String SERIALIZED_NAME_D_N_S = "DNS";
  @SerializedName(SERIALIZED_NAME_D_N_S)
  private DNSConfig DNS;

  public static final String SERIALIZED_NAME_DEVICE = "Device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private String device;

  public static final String SERIALIZED_NAME_DYNAMIC_PORTS = "DynamicPorts";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_PORTS)
  private List<Port> dynamicPorts = null;

  public static final String SERIALIZED_NAME_HOSTNAME = "Hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_I_P = "IP";
  @SerializedName(SERIALIZED_NAME_I_P)
  private String IP;

  public static final String SERIALIZED_NAME_MBITS = "MBits";
  @SerializedName(SERIALIZED_NAME_MBITS)
  private Integer mbits;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_RESERVED_PORTS = "ReservedPorts";
  @SerializedName(SERIALIZED_NAME_RESERVED_PORTS)
  private List<Port> reservedPorts = null;

  public NetworkResource() { 
  }

  public NetworkResource CIDR(String CIDR) {
    
    this.CIDR = CIDR;
    return this;
  }

   /**
   * Get CIDR
   * @return CIDR
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCIDR() {
    return CIDR;
  }


  public void setCIDR(String CIDR) {
    this.CIDR = CIDR;
  }


  public NetworkResource DNS(DNSConfig DNS) {
    
    this.DNS = DNS;
    return this;
  }

   /**
   * Get DNS
   * @return DNS
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DNSConfig getDNS() {
    return DNS;
  }


  public void setDNS(DNSConfig DNS) {
    this.DNS = DNS;
  }


  public NetworkResource device(String device) {
    
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDevice() {
    return device;
  }


  public void setDevice(String device) {
    this.device = device;
  }


  public NetworkResource dynamicPorts(List<Port> dynamicPorts) {
    
    this.dynamicPorts = dynamicPorts;
    return this;
  }

  public NetworkResource addDynamicPortsItem(Port dynamicPortsItem) {
    if (this.dynamicPorts == null) {
      this.dynamicPorts = new ArrayList<>();
    }
    this.dynamicPorts.add(dynamicPortsItem);
    return this;
  }

   /**
   * Get dynamicPorts
   * @return dynamicPorts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Port> getDynamicPorts() {
    return dynamicPorts;
  }


  public void setDynamicPorts(List<Port> dynamicPorts) {
    this.dynamicPorts = dynamicPorts;
  }


  public NetworkResource hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public NetworkResource IP(String IP) {
    
    this.IP = IP;
    return this;
  }

   /**
   * Get IP
   * @return IP
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIP() {
    return IP;
  }


  public void setIP(String IP) {
    this.IP = IP;
  }


  public NetworkResource mbits(Integer mbits) {
    
    this.mbits = mbits;
    return this;
  }

   /**
   * Get mbits
   * @return mbits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMbits() {
    return mbits;
  }


  public void setMbits(Integer mbits) {
    this.mbits = mbits;
  }


  public NetworkResource mode(String mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMode() {
    return mode;
  }


  public void setMode(String mode) {
    this.mode = mode;
  }


  public NetworkResource reservedPorts(List<Port> reservedPorts) {
    
    this.reservedPorts = reservedPorts;
    return this;
  }

  public NetworkResource addReservedPortsItem(Port reservedPortsItem) {
    if (this.reservedPorts == null) {
      this.reservedPorts = new ArrayList<>();
    }
    this.reservedPorts.add(reservedPortsItem);
    return this;
  }

   /**
   * Get reservedPorts
   * @return reservedPorts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Port> getReservedPorts() {
    return reservedPorts;
  }


  public void setReservedPorts(List<Port> reservedPorts) {
    this.reservedPorts = reservedPorts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkResource networkResource = (NetworkResource) o;
    return Objects.equals(this.CIDR, networkResource.CIDR) &&
        Objects.equals(this.DNS, networkResource.DNS) &&
        Objects.equals(this.device, networkResource.device) &&
        Objects.equals(this.dynamicPorts, networkResource.dynamicPorts) &&
        Objects.equals(this.hostname, networkResource.hostname) &&
        Objects.equals(this.IP, networkResource.IP) &&
        Objects.equals(this.mbits, networkResource.mbits) &&
        Objects.equals(this.mode, networkResource.mode) &&
        Objects.equals(this.reservedPorts, networkResource.reservedPorts);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CIDR, DNS, device, dynamicPorts, hostname, IP, mbits, mode, reservedPorts);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkResource {\n");
    sb.append("    CIDR: ").append(toIndentedString(CIDR)).append("\n");
    sb.append("    DNS: ").append(toIndentedString(DNS)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    dynamicPorts: ").append(toIndentedString(dynamicPorts)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    IP: ").append(toIndentedString(IP)).append("\n");
    sb.append("    mbits: ").append(toIndentedString(mbits)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    reservedPorts: ").append(toIndentedString(reservedPorts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CIDR");
    openapiFields.add("DNS");
    openapiFields.add("Device");
    openapiFields.add("DynamicPorts");
    openapiFields.add("Hostname");
    openapiFields.add("IP");
    openapiFields.add("MBits");
    openapiFields.add("Mode");
    openapiFields.add("ReservedPorts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NetworkResource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (NetworkResource.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkResource is not found in the empty JSON string", NetworkResource.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NetworkResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkResource` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("CIDR") != null && !jsonObj.get("CIDR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CIDR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CIDR").toString()));
      }
      // validate the optional field `DNS`
      if (jsonObj.getAsJsonObject("DNS") != null) {
        DNSConfig.validateJsonObject(jsonObj.getAsJsonObject("DNS"));
      }
      if (jsonObj.get("Device") != null && !jsonObj.get("Device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Device").toString()));
      }
      JsonArray jsonArraydynamicPorts = jsonObj.getAsJsonArray("DynamicPorts");
      if (jsonArraydynamicPorts != null) {
        // ensure the json data is an array
        if (!jsonObj.get("DynamicPorts").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `DynamicPorts` to be an array in the JSON string but got `%s`", jsonObj.get("DynamicPorts").toString()));
        }

        // validate the optional field `DynamicPorts` (array)
        for (int i = 0; i < jsonArraydynamicPorts.size(); i++) {
          Port.validateJsonObject(jsonArraydynamicPorts.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("Hostname") != null && !jsonObj.get("Hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Hostname").toString()));
      }
      if (jsonObj.get("IP") != null && !jsonObj.get("IP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IP").toString()));
      }
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mode").toString()));
      }
      JsonArray jsonArrayreservedPorts = jsonObj.getAsJsonArray("ReservedPorts");
      if (jsonArrayreservedPorts != null) {
        // ensure the json data is an array
        if (!jsonObj.get("ReservedPorts").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `ReservedPorts` to be an array in the JSON string but got `%s`", jsonObj.get("ReservedPorts").toString()));
        }

        // validate the optional field `ReservedPorts` (array)
        for (int i = 0; i < jsonArrayreservedPorts.size(); i++) {
          Port.validateJsonObject(jsonArrayreservedPorts.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkResource.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkResource>() {
           @Override
           public void write(JsonWriter out, NetworkResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkResource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NetworkResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NetworkResource
  * @throws IOException if the JSON string is invalid with respect to NetworkResource
  */
  public static NetworkResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkResource.class);
  }

 /**
  * Convert an instance of NetworkResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

