/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * ServerHealth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ServerHealth {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_HEALTHY = "Healthy";
  @SerializedName(SERIALIZED_NAME_HEALTHY)
  private Boolean healthy;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_LAST_CONTACT = "LastContact";
  @SerializedName(SERIALIZED_NAME_LAST_CONTACT)
  private Long lastContact;

  public static final String SERIALIZED_NAME_LAST_INDEX = "LastIndex";
  @SerializedName(SERIALIZED_NAME_LAST_INDEX)
  private Integer lastIndex;

  public static final String SERIALIZED_NAME_LAST_TERM = "LastTerm";
  @SerializedName(SERIALIZED_NAME_LAST_TERM)
  private Integer lastTerm;

  public static final String SERIALIZED_NAME_LEADER = "Leader";
  @SerializedName(SERIALIZED_NAME_LEADER)
  private Boolean leader;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERF_STATUS = "SerfStatus";
  @SerializedName(SERIALIZED_NAME_SERF_STATUS)
  private String serfStatus;

  public static final String SERIALIZED_NAME_STABLE_SINCE = "StableSince";
  @SerializedName(SERIALIZED_NAME_STABLE_SINCE)
  private OffsetDateTime stableSince;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VOTER = "Voter";
  @SerializedName(SERIALIZED_NAME_VOTER)
  private Boolean voter;

  public ServerHealth() { 
  }

  public ServerHealth address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public ServerHealth healthy(Boolean healthy) {
    
    this.healthy = healthy;
    return this;
  }

   /**
   * Get healthy
   * @return healthy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHealthy() {
    return healthy;
  }


  public void setHealthy(Boolean healthy) {
    this.healthy = healthy;
  }


  public ServerHealth ID(String ID) {
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getID() {
    return ID;
  }


  public void setID(String ID) {
    this.ID = ID;
  }


  public ServerHealth lastContact(Long lastContact) {
    
    this.lastContact = lastContact;
    return this;
  }

   /**
   * Get lastContact
   * @return lastContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getLastContact() {
    return lastContact;
  }


  public void setLastContact(Long lastContact) {
    this.lastContact = lastContact;
  }


  public ServerHealth lastIndex(Integer lastIndex) {
    
    this.lastIndex = lastIndex;
    return this;
  }

   /**
   * Get lastIndex
   * minimum: 0
   * maximum: 384
   * @return lastIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLastIndex() {
    return lastIndex;
  }


  public void setLastIndex(Integer lastIndex) {
    this.lastIndex = lastIndex;
  }


  public ServerHealth lastTerm(Integer lastTerm) {
    
    this.lastTerm = lastTerm;
    return this;
  }

   /**
   * Get lastTerm
   * minimum: 0
   * maximum: 384
   * @return lastTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLastTerm() {
    return lastTerm;
  }


  public void setLastTerm(Integer lastTerm) {
    this.lastTerm = lastTerm;
  }


  public ServerHealth leader(Boolean leader) {
    
    this.leader = leader;
    return this;
  }

   /**
   * Get leader
   * @return leader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLeader() {
    return leader;
  }


  public void setLeader(Boolean leader) {
    this.leader = leader;
  }


  public ServerHealth name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ServerHealth serfStatus(String serfStatus) {
    
    this.serfStatus = serfStatus;
    return this;
  }

   /**
   * Get serfStatus
   * @return serfStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSerfStatus() {
    return serfStatus;
  }


  public void setSerfStatus(String serfStatus) {
    this.serfStatus = serfStatus;
  }


  public ServerHealth stableSince(OffsetDateTime stableSince) {
    
    this.stableSince = stableSince;
    return this;
  }

   /**
   * Get stableSince
   * @return stableSince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStableSince() {
    return stableSince;
  }


  public void setStableSince(OffsetDateTime stableSince) {
    this.stableSince = stableSince;
  }


  public ServerHealth version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public ServerHealth voter(Boolean voter) {
    
    this.voter = voter;
    return this;
  }

   /**
   * Get voter
   * @return voter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getVoter() {
    return voter;
  }


  public void setVoter(Boolean voter) {
    this.voter = voter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerHealth serverHealth = (ServerHealth) o;
    return Objects.equals(this.address, serverHealth.address) &&
        Objects.equals(this.healthy, serverHealth.healthy) &&
        Objects.equals(this.ID, serverHealth.ID) &&
        Objects.equals(this.lastContact, serverHealth.lastContact) &&
        Objects.equals(this.lastIndex, serverHealth.lastIndex) &&
        Objects.equals(this.lastTerm, serverHealth.lastTerm) &&
        Objects.equals(this.leader, serverHealth.leader) &&
        Objects.equals(this.name, serverHealth.name) &&
        Objects.equals(this.serfStatus, serverHealth.serfStatus) &&
        Objects.equals(this.stableSince, serverHealth.stableSince) &&
        Objects.equals(this.version, serverHealth.version) &&
        Objects.equals(this.voter, serverHealth.voter);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, healthy, ID, lastContact, lastIndex, lastTerm, leader, name, serfStatus, stableSince, version, voter);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerHealth {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    lastContact: ").append(toIndentedString(lastContact)).append("\n");
    sb.append("    lastIndex: ").append(toIndentedString(lastIndex)).append("\n");
    sb.append("    lastTerm: ").append(toIndentedString(lastTerm)).append("\n");
    sb.append("    leader: ").append(toIndentedString(leader)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serfStatus: ").append(toIndentedString(serfStatus)).append("\n");
    sb.append("    stableSince: ").append(toIndentedString(stableSince)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    voter: ").append(toIndentedString(voter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("Healthy");
    openapiFields.add("ID");
    openapiFields.add("LastContact");
    openapiFields.add("LastIndex");
    openapiFields.add("LastTerm");
    openapiFields.add("Leader");
    openapiFields.add("Name");
    openapiFields.add("SerfStatus");
    openapiFields.add("StableSince");
    openapiFields.add("Version");
    openapiFields.add("Voter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ServerHealth
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ServerHealth.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerHealth is not found in the empty JSON string", ServerHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ServerHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerHealth` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address").toString()));
      }
      if (jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("SerfStatus") != null && !jsonObj.get("SerfStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerfStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerfStatus").toString()));
      }
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerHealth>() {
           @Override
           public void write(JsonWriter out, ServerHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerHealth read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ServerHealth given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ServerHealth
  * @throws IOException if the JSON string is invalid with respect to ServerHealth
  */
  public static ServerHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerHealth.class);
  }

 /**
  * Convert an instance of ServerHealth to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

