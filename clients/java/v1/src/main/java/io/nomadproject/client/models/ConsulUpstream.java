/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.ConsulMeshGateway;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * ConsulUpstream
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConsulUpstream {
  public static final String SERIALIZED_NAME_DATACENTER = "Datacenter";
  @SerializedName(SERIALIZED_NAME_DATACENTER)
  private String datacenter;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "DestinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_LOCAL_BIND_ADDRESS = "LocalBindAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_BIND_ADDRESS)
  private String localBindAddress;

  public static final String SERIALIZED_NAME_LOCAL_BIND_PORT = "LocalBindPort";
  @SerializedName(SERIALIZED_NAME_LOCAL_BIND_PORT)
  private Integer localBindPort;

  public static final String SERIALIZED_NAME_MESH_GATEWAY = "MeshGateway";
  @SerializedName(SERIALIZED_NAME_MESH_GATEWAY)
  private ConsulMeshGateway meshGateway;

  public ConsulUpstream() { 
  }

  public ConsulUpstream datacenter(String datacenter) {
    
    this.datacenter = datacenter;
    return this;
  }

   /**
   * Get datacenter
   * @return datacenter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDatacenter() {
    return datacenter;
  }


  public void setDatacenter(String datacenter) {
    this.datacenter = datacenter;
  }


  public ConsulUpstream destinationName(String destinationName) {
    
    this.destinationName = destinationName;
    return this;
  }

   /**
   * Get destinationName
   * @return destinationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDestinationName() {
    return destinationName;
  }


  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public ConsulUpstream localBindAddress(String localBindAddress) {
    
    this.localBindAddress = localBindAddress;
    return this;
  }

   /**
   * Get localBindAddress
   * @return localBindAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocalBindAddress() {
    return localBindAddress;
  }


  public void setLocalBindAddress(String localBindAddress) {
    this.localBindAddress = localBindAddress;
  }


  public ConsulUpstream localBindPort(Integer localBindPort) {
    
    this.localBindPort = localBindPort;
    return this;
  }

   /**
   * Get localBindPort
   * @return localBindPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLocalBindPort() {
    return localBindPort;
  }


  public void setLocalBindPort(Integer localBindPort) {
    this.localBindPort = localBindPort;
  }


  public ConsulUpstream meshGateway(ConsulMeshGateway meshGateway) {
    
    this.meshGateway = meshGateway;
    return this;
  }

   /**
   * Get meshGateway
   * @return meshGateway
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConsulMeshGateway getMeshGateway() {
    return meshGateway;
  }


  public void setMeshGateway(ConsulMeshGateway meshGateway) {
    this.meshGateway = meshGateway;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsulUpstream consulUpstream = (ConsulUpstream) o;
    return Objects.equals(this.datacenter, consulUpstream.datacenter) &&
        Objects.equals(this.destinationName, consulUpstream.destinationName) &&
        Objects.equals(this.localBindAddress, consulUpstream.localBindAddress) &&
        Objects.equals(this.localBindPort, consulUpstream.localBindPort) &&
        Objects.equals(this.meshGateway, consulUpstream.meshGateway);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(datacenter, destinationName, localBindAddress, localBindPort, meshGateway);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsulUpstream {\n");
    sb.append("    datacenter: ").append(toIndentedString(datacenter)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    localBindAddress: ").append(toIndentedString(localBindAddress)).append("\n");
    sb.append("    localBindPort: ").append(toIndentedString(localBindPort)).append("\n");
    sb.append("    meshGateway: ").append(toIndentedString(meshGateway)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Datacenter");
    openapiFields.add("DestinationName");
    openapiFields.add("LocalBindAddress");
    openapiFields.add("LocalBindPort");
    openapiFields.add("MeshGateway");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConsulUpstream
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConsulUpstream.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsulUpstream is not found in the empty JSON string", ConsulUpstream.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConsulUpstream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsulUpstream` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Datacenter") != null && !jsonObj.get("Datacenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Datacenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Datacenter").toString()));
      }
      if (jsonObj.get("DestinationName") != null && !jsonObj.get("DestinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DestinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DestinationName").toString()));
      }
      if (jsonObj.get("LocalBindAddress") != null && !jsonObj.get("LocalBindAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalBindAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalBindAddress").toString()));
      }
      // validate the optional field `MeshGateway`
      if (jsonObj.getAsJsonObject("MeshGateway") != null) {
        ConsulMeshGateway.validateJsonObject(jsonObj.getAsJsonObject("MeshGateway"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsulUpstream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsulUpstream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsulUpstream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsulUpstream.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsulUpstream>() {
           @Override
           public void write(JsonWriter out, ConsulUpstream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsulUpstream read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsulUpstream given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsulUpstream
  * @throws IOException if the JSON string is invalid with respect to ConsulUpstream
  */
  public static ConsulUpstream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsulUpstream.class);
  }

 /**
  * Convert an instance of ConsulUpstream to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

