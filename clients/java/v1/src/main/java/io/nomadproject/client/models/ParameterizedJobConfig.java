/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * ParameterizedJobConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ParameterizedJobConfig {
  public static final String SERIALIZED_NAME_META_OPTIONAL = "MetaOptional";
  @SerializedName(SERIALIZED_NAME_META_OPTIONAL)
  private List<String> metaOptional = null;

  public static final String SERIALIZED_NAME_META_REQUIRED = "MetaRequired";
  @SerializedName(SERIALIZED_NAME_META_REQUIRED)
  private List<String> metaRequired = null;

  public static final String SERIALIZED_NAME_PAYLOAD = "Payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public ParameterizedJobConfig() { 
  }

  public ParameterizedJobConfig metaOptional(List<String> metaOptional) {
    
    this.metaOptional = metaOptional;
    return this;
  }

  public ParameterizedJobConfig addMetaOptionalItem(String metaOptionalItem) {
    if (this.metaOptional == null) {
      this.metaOptional = new ArrayList<>();
    }
    this.metaOptional.add(metaOptionalItem);
    return this;
  }

   /**
   * Get metaOptional
   * @return metaOptional
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMetaOptional() {
    return metaOptional;
  }


  public void setMetaOptional(List<String> metaOptional) {
    this.metaOptional = metaOptional;
  }


  public ParameterizedJobConfig metaRequired(List<String> metaRequired) {
    
    this.metaRequired = metaRequired;
    return this;
  }

  public ParameterizedJobConfig addMetaRequiredItem(String metaRequiredItem) {
    if (this.metaRequired == null) {
      this.metaRequired = new ArrayList<>();
    }
    this.metaRequired.add(metaRequiredItem);
    return this;
  }

   /**
   * Get metaRequired
   * @return metaRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMetaRequired() {
    return metaRequired;
  }


  public void setMetaRequired(List<String> metaRequired) {
    this.metaRequired = metaRequired;
  }


  public ParameterizedJobConfig payload(String payload) {
    
    this.payload = payload;
    return this;
  }

   /**
   * Get payload
   * @return payload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayload() {
    return payload;
  }


  public void setPayload(String payload) {
    this.payload = payload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterizedJobConfig parameterizedJobConfig = (ParameterizedJobConfig) o;
    return Objects.equals(this.metaOptional, parameterizedJobConfig.metaOptional) &&
        Objects.equals(this.metaRequired, parameterizedJobConfig.metaRequired) &&
        Objects.equals(this.payload, parameterizedJobConfig.payload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metaOptional, metaRequired, payload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterizedJobConfig {\n");
    sb.append("    metaOptional: ").append(toIndentedString(metaOptional)).append("\n");
    sb.append("    metaRequired: ").append(toIndentedString(metaRequired)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetaOptional");
    openapiFields.add("MetaRequired");
    openapiFields.add("Payload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ParameterizedJobConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ParameterizedJobConfig.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParameterizedJobConfig is not found in the empty JSON string", ParameterizedJobConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ParameterizedJobConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParameterizedJobConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("MetaOptional") != null && !jsonObj.get("MetaOptional").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetaOptional` to be an array in the JSON string but got `%s`", jsonObj.get("MetaOptional").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("MetaRequired") != null && !jsonObj.get("MetaRequired").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetaRequired` to be an array in the JSON string but got `%s`", jsonObj.get("MetaRequired").toString()));
      }
      if (jsonObj.get("Payload") != null && !jsonObj.get("Payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Payload").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParameterizedJobConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParameterizedJobConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParameterizedJobConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParameterizedJobConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ParameterizedJobConfig>() {
           @Override
           public void write(JsonWriter out, ParameterizedJobConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParameterizedJobConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ParameterizedJobConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ParameterizedJobConfig
  * @throws IOException if the JSON string is invalid with respect to ParameterizedJobConfig
  */
  public static ParameterizedJobConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParameterizedJobConfig.class);
  }

 /**
  * Convert an instance of ParameterizedJobConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

