/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.Job;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * JobRegisterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class JobRegisterRequest {
  public static final String SERIALIZED_NAME_ENFORCE_INDEX = "EnforceIndex";
  @SerializedName(SERIALIZED_NAME_ENFORCE_INDEX)
  private Boolean enforceIndex;

  public static final String SERIALIZED_NAME_EVAL_PRIORITY = "EvalPriority";
  @SerializedName(SERIALIZED_NAME_EVAL_PRIORITY)
  private Integer evalPriority;

  public static final String SERIALIZED_NAME_JOB = "Job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private Job job;

  public static final String SERIALIZED_NAME_JOB_MODIFY_INDEX = "JobModifyIndex";
  @SerializedName(SERIALIZED_NAME_JOB_MODIFY_INDEX)
  private Integer jobModifyIndex;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_POLICY_OVERRIDE = "PolicyOverride";
  @SerializedName(SERIALIZED_NAME_POLICY_OVERRIDE)
  private Boolean policyOverride;

  public static final String SERIALIZED_NAME_PRESERVE_COUNTS = "PreserveCounts";
  @SerializedName(SERIALIZED_NAME_PRESERVE_COUNTS)
  private Boolean preserveCounts;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SECRET_I_D = "SecretID";
  @SerializedName(SERIALIZED_NAME_SECRET_I_D)
  private String secretID;

  public JobRegisterRequest() { 
  }

  public JobRegisterRequest enforceIndex(Boolean enforceIndex) {
    
    this.enforceIndex = enforceIndex;
    return this;
  }

   /**
   * Get enforceIndex
   * @return enforceIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnforceIndex() {
    return enforceIndex;
  }


  public void setEnforceIndex(Boolean enforceIndex) {
    this.enforceIndex = enforceIndex;
  }


  public JobRegisterRequest evalPriority(Integer evalPriority) {
    
    this.evalPriority = evalPriority;
    return this;
  }

   /**
   * Get evalPriority
   * @return evalPriority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEvalPriority() {
    return evalPriority;
  }


  public void setEvalPriority(Integer evalPriority) {
    this.evalPriority = evalPriority;
  }


  public JobRegisterRequest job(Job job) {
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Job getJob() {
    return job;
  }


  public void setJob(Job job) {
    this.job = job;
  }


  public JobRegisterRequest jobModifyIndex(Integer jobModifyIndex) {
    
    this.jobModifyIndex = jobModifyIndex;
    return this;
  }

   /**
   * Get jobModifyIndex
   * minimum: 0
   * maximum: 384
   * @return jobModifyIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getJobModifyIndex() {
    return jobModifyIndex;
  }


  public void setJobModifyIndex(Integer jobModifyIndex) {
    this.jobModifyIndex = jobModifyIndex;
  }


  public JobRegisterRequest namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public JobRegisterRequest policyOverride(Boolean policyOverride) {
    
    this.policyOverride = policyOverride;
    return this;
  }

   /**
   * Get policyOverride
   * @return policyOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPolicyOverride() {
    return policyOverride;
  }


  public void setPolicyOverride(Boolean policyOverride) {
    this.policyOverride = policyOverride;
  }


  public JobRegisterRequest preserveCounts(Boolean preserveCounts) {
    
    this.preserveCounts = preserveCounts;
    return this;
  }

   /**
   * Get preserveCounts
   * @return preserveCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPreserveCounts() {
    return preserveCounts;
  }


  public void setPreserveCounts(Boolean preserveCounts) {
    this.preserveCounts = preserveCounts;
  }


  public JobRegisterRequest region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public JobRegisterRequest secretID(String secretID) {
    
    this.secretID = secretID;
    return this;
  }

   /**
   * Get secretID
   * @return secretID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSecretID() {
    return secretID;
  }


  public void setSecretID(String secretID) {
    this.secretID = secretID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobRegisterRequest jobRegisterRequest = (JobRegisterRequest) o;
    return Objects.equals(this.enforceIndex, jobRegisterRequest.enforceIndex) &&
        Objects.equals(this.evalPriority, jobRegisterRequest.evalPriority) &&
        Objects.equals(this.job, jobRegisterRequest.job) &&
        Objects.equals(this.jobModifyIndex, jobRegisterRequest.jobModifyIndex) &&
        Objects.equals(this.namespace, jobRegisterRequest.namespace) &&
        Objects.equals(this.policyOverride, jobRegisterRequest.policyOverride) &&
        Objects.equals(this.preserveCounts, jobRegisterRequest.preserveCounts) &&
        Objects.equals(this.region, jobRegisterRequest.region) &&
        Objects.equals(this.secretID, jobRegisterRequest.secretID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enforceIndex, evalPriority, job, jobModifyIndex, namespace, policyOverride, preserveCounts, region, secretID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobRegisterRequest {\n");
    sb.append("    enforceIndex: ").append(toIndentedString(enforceIndex)).append("\n");
    sb.append("    evalPriority: ").append(toIndentedString(evalPriority)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    jobModifyIndex: ").append(toIndentedString(jobModifyIndex)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    policyOverride: ").append(toIndentedString(policyOverride)).append("\n");
    sb.append("    preserveCounts: ").append(toIndentedString(preserveCounts)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    secretID: ").append(toIndentedString(secretID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EnforceIndex");
    openapiFields.add("EvalPriority");
    openapiFields.add("Job");
    openapiFields.add("JobModifyIndex");
    openapiFields.add("Namespace");
    openapiFields.add("PolicyOverride");
    openapiFields.add("PreserveCounts");
    openapiFields.add("Region");
    openapiFields.add("SecretID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobRegisterRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (JobRegisterRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobRegisterRequest is not found in the empty JSON string", JobRegisterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JobRegisterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobRegisterRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `Job`
      if (jsonObj.getAsJsonObject("Job") != null) {
        Job.validateJsonObject(jsonObj.getAsJsonObject("Job"));
      }
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Namespace").toString()));
      }
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
      if (jsonObj.get("SecretID") != null && !jsonObj.get("SecretID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecretID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecretID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobRegisterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobRegisterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobRegisterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobRegisterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<JobRegisterRequest>() {
           @Override
           public void write(JsonWriter out, JobRegisterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobRegisterRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobRegisterRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobRegisterRequest
  * @throws IOException if the JSON string is invalid with respect to JobRegisterRequest
  */
  public static JobRegisterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobRegisterRequest.class);
  }

 /**
  * Convert an instance of JobRegisterRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

