/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * PeriodicConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PeriodicConfig {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_PROHIBIT_OVERLAP = "ProhibitOverlap";
  @SerializedName(SERIALIZED_NAME_PROHIBIT_OVERLAP)
  private Boolean prohibitOverlap;

  public static final String SERIALIZED_NAME_SPEC = "Spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  private String spec;

  public static final String SERIALIZED_NAME_SPEC_TYPE = "SpecType";
  @SerializedName(SERIALIZED_NAME_SPEC_TYPE)
  private String specType;

  public static final String SERIALIZED_NAME_TIME_ZONE = "TimeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public PeriodicConfig() { 
  }

  public PeriodicConfig enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public PeriodicConfig prohibitOverlap(Boolean prohibitOverlap) {
    
    this.prohibitOverlap = prohibitOverlap;
    return this;
  }

   /**
   * Get prohibitOverlap
   * @return prohibitOverlap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getProhibitOverlap() {
    return prohibitOverlap;
  }


  public void setProhibitOverlap(Boolean prohibitOverlap) {
    this.prohibitOverlap = prohibitOverlap;
  }


  public PeriodicConfig spec(String spec) {
    
    this.spec = spec;
    return this;
  }

   /**
   * Get spec
   * @return spec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSpec() {
    return spec;
  }


  public void setSpec(String spec) {
    this.spec = spec;
  }


  public PeriodicConfig specType(String specType) {
    
    this.specType = specType;
    return this;
  }

   /**
   * Get specType
   * @return specType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSpecType() {
    return specType;
  }


  public void setSpecType(String specType) {
    this.specType = specType;
  }


  public PeriodicConfig timeZone(String timeZone) {
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Get timeZone
   * @return timeZone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodicConfig periodicConfig = (PeriodicConfig) o;
    return Objects.equals(this.enabled, periodicConfig.enabled) &&
        Objects.equals(this.prohibitOverlap, periodicConfig.prohibitOverlap) &&
        Objects.equals(this.spec, periodicConfig.spec) &&
        Objects.equals(this.specType, periodicConfig.specType) &&
        Objects.equals(this.timeZone, periodicConfig.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, prohibitOverlap, spec, specType, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodicConfig {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    prohibitOverlap: ").append(toIndentedString(prohibitOverlap)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    specType: ").append(toIndentedString(specType)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("ProhibitOverlap");
    openapiFields.add("Spec");
    openapiFields.add("SpecType");
    openapiFields.add("TimeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PeriodicConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PeriodicConfig.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeriodicConfig is not found in the empty JSON string", PeriodicConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PeriodicConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeriodicConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Spec") != null && !jsonObj.get("Spec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Spec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Spec").toString()));
      }
      if (jsonObj.get("SpecType") != null && !jsonObj.get("SpecType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SpecType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SpecType").toString()));
      }
      if (jsonObj.get("TimeZone") != null && !jsonObj.get("TimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeriodicConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeriodicConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeriodicConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeriodicConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PeriodicConfig>() {
           @Override
           public void write(JsonWriter out, PeriodicConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeriodicConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PeriodicConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PeriodicConfig
  * @throws IOException if the JSON string is invalid with respect to PeriodicConfig
  */
  public static PeriodicConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeriodicConfig.class);
  }

 /**
  * Convert an instance of PeriodicConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

