/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * CSISnapshot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CSISnapshot {
  public static final String SERIALIZED_NAME_CREATE_TIME = "CreateTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private Long createTime;

  public static final String SERIALIZED_NAME_EXTERNAL_SOURCE_VOLUME_I_D = "ExternalSourceVolumeID";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SOURCE_VOLUME_I_D)
  private String externalSourceVolumeID;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_IS_READY = "IsReady";
  @SerializedName(SERIALIZED_NAME_IS_READY)
  private Boolean isReady;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = null;

  public static final String SERIALIZED_NAME_PLUGIN_I_D = "PluginID";
  @SerializedName(SERIALIZED_NAME_PLUGIN_I_D)
  private String pluginID;

  public static final String SERIALIZED_NAME_SECRETS = "Secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private Map<String, String> secrets = null;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "SizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private Long sizeBytes;

  public static final String SERIALIZED_NAME_SOURCE_VOLUME_I_D = "SourceVolumeID";
  @SerializedName(SERIALIZED_NAME_SOURCE_VOLUME_I_D)
  private String sourceVolumeID;

  public CSISnapshot() { 
  }

  public CSISnapshot createTime(Long createTime) {
    
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getCreateTime() {
    return createTime;
  }


  public void setCreateTime(Long createTime) {
    this.createTime = createTime;
  }


  public CSISnapshot externalSourceVolumeID(String externalSourceVolumeID) {
    
    this.externalSourceVolumeID = externalSourceVolumeID;
    return this;
  }

   /**
   * Get externalSourceVolumeID
   * @return externalSourceVolumeID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalSourceVolumeID() {
    return externalSourceVolumeID;
  }


  public void setExternalSourceVolumeID(String externalSourceVolumeID) {
    this.externalSourceVolumeID = externalSourceVolumeID;
  }


  public CSISnapshot ID(String ID) {
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getID() {
    return ID;
  }


  public void setID(String ID) {
    this.ID = ID;
  }


  public CSISnapshot isReady(Boolean isReady) {
    
    this.isReady = isReady;
    return this;
  }

   /**
   * Get isReady
   * @return isReady
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsReady() {
    return isReady;
  }


  public void setIsReady(Boolean isReady) {
    this.isReady = isReady;
  }


  public CSISnapshot name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CSISnapshot parameters(Map<String, String> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public CSISnapshot putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getParameters() {
    return parameters;
  }


  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public CSISnapshot pluginID(String pluginID) {
    
    this.pluginID = pluginID;
    return this;
  }

   /**
   * Get pluginID
   * @return pluginID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPluginID() {
    return pluginID;
  }


  public void setPluginID(String pluginID) {
    this.pluginID = pluginID;
  }


  public CSISnapshot secrets(Map<String, String> secrets) {
    
    this.secrets = secrets;
    return this;
  }

  public CSISnapshot putSecretsItem(String key, String secretsItem) {
    if (this.secrets == null) {
      this.secrets = new HashMap<>();
    }
    this.secrets.put(key, secretsItem);
    return this;
  }

   /**
   * Get secrets
   * @return secrets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getSecrets() {
    return secrets;
  }


  public void setSecrets(Map<String, String> secrets) {
    this.secrets = secrets;
  }


  public CSISnapshot sizeBytes(Long sizeBytes) {
    
    this.sizeBytes = sizeBytes;
    return this;
  }

   /**
   * Get sizeBytes
   * @return sizeBytes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getSizeBytes() {
    return sizeBytes;
  }


  public void setSizeBytes(Long sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public CSISnapshot sourceVolumeID(String sourceVolumeID) {
    
    this.sourceVolumeID = sourceVolumeID;
    return this;
  }

   /**
   * Get sourceVolumeID
   * @return sourceVolumeID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSourceVolumeID() {
    return sourceVolumeID;
  }


  public void setSourceVolumeID(String sourceVolumeID) {
    this.sourceVolumeID = sourceVolumeID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CSISnapshot csISnapshot = (CSISnapshot) o;
    return Objects.equals(this.createTime, csISnapshot.createTime) &&
        Objects.equals(this.externalSourceVolumeID, csISnapshot.externalSourceVolumeID) &&
        Objects.equals(this.ID, csISnapshot.ID) &&
        Objects.equals(this.isReady, csISnapshot.isReady) &&
        Objects.equals(this.name, csISnapshot.name) &&
        Objects.equals(this.parameters, csISnapshot.parameters) &&
        Objects.equals(this.pluginID, csISnapshot.pluginID) &&
        Objects.equals(this.secrets, csISnapshot.secrets) &&
        Objects.equals(this.sizeBytes, csISnapshot.sizeBytes) &&
        Objects.equals(this.sourceVolumeID, csISnapshot.sourceVolumeID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, externalSourceVolumeID, ID, isReady, name, parameters, pluginID, secrets, sizeBytes, sourceVolumeID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CSISnapshot {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    externalSourceVolumeID: ").append(toIndentedString(externalSourceVolumeID)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    isReady: ").append(toIndentedString(isReady)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    pluginID: ").append(toIndentedString(pluginID)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    sourceVolumeID: ").append(toIndentedString(sourceVolumeID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreateTime");
    openapiFields.add("ExternalSourceVolumeID");
    openapiFields.add("ID");
    openapiFields.add("IsReady");
    openapiFields.add("Name");
    openapiFields.add("Parameters");
    openapiFields.add("PluginID");
    openapiFields.add("Secrets");
    openapiFields.add("SizeBytes");
    openapiFields.add("SourceVolumeID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CSISnapshot
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CSISnapshot.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CSISnapshot is not found in the empty JSON string", CSISnapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CSISnapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CSISnapshot` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ExternalSourceVolumeID") != null && !jsonObj.get("ExternalSourceVolumeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalSourceVolumeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalSourceVolumeID").toString()));
      }
      if (jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("PluginID") != null && !jsonObj.get("PluginID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PluginID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PluginID").toString()));
      }
      if (jsonObj.get("SourceVolumeID") != null && !jsonObj.get("SourceVolumeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceVolumeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceVolumeID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CSISnapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CSISnapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CSISnapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CSISnapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<CSISnapshot>() {
           @Override
           public void write(JsonWriter out, CSISnapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CSISnapshot read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CSISnapshot given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CSISnapshot
  * @throws IOException if the JSON string is invalid with respect to CSISnapshot
  */
  public static CSISnapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CSISnapshot.class);
  }

 /**
  * Convert an instance of CSISnapshot to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

