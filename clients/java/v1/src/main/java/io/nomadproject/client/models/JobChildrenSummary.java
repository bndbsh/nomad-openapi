/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * JobChildrenSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class JobChildrenSummary {
  public static final String SERIALIZED_NAME_DEAD = "Dead";
  @SerializedName(SERIALIZED_NAME_DEAD)
  private Long dead;

  public static final String SERIALIZED_NAME_PENDING = "Pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Long pending;

  public static final String SERIALIZED_NAME_RUNNING = "Running";
  @SerializedName(SERIALIZED_NAME_RUNNING)
  private Long running;

  public JobChildrenSummary() { 
  }

  public JobChildrenSummary dead(Long dead) {
    
    this.dead = dead;
    return this;
  }

   /**
   * Get dead
   * @return dead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getDead() {
    return dead;
  }


  public void setDead(Long dead) {
    this.dead = dead;
  }


  public JobChildrenSummary pending(Long pending) {
    
    this.pending = pending;
    return this;
  }

   /**
   * Get pending
   * @return pending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getPending() {
    return pending;
  }


  public void setPending(Long pending) {
    this.pending = pending;
  }


  public JobChildrenSummary running(Long running) {
    
    this.running = running;
    return this;
  }

   /**
   * Get running
   * @return running
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getRunning() {
    return running;
  }


  public void setRunning(Long running) {
    this.running = running;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobChildrenSummary jobChildrenSummary = (JobChildrenSummary) o;
    return Objects.equals(this.dead, jobChildrenSummary.dead) &&
        Objects.equals(this.pending, jobChildrenSummary.pending) &&
        Objects.equals(this.running, jobChildrenSummary.running);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dead, pending, running);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobChildrenSummary {\n");
    sb.append("    dead: ").append(toIndentedString(dead)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Dead");
    openapiFields.add("Pending");
    openapiFields.add("Running");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobChildrenSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (JobChildrenSummary.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobChildrenSummary is not found in the empty JSON string", JobChildrenSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JobChildrenSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobChildrenSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobChildrenSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobChildrenSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobChildrenSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobChildrenSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<JobChildrenSummary>() {
           @Override
           public void write(JsonWriter out, JobChildrenSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobChildrenSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobChildrenSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobChildrenSummary
  * @throws IOException if the JSON string is invalid with respect to JobChildrenSummary
  */
  public static JobChildrenSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobChildrenSummary.class);
  }

 /**
  * Convert an instance of JobChildrenSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

