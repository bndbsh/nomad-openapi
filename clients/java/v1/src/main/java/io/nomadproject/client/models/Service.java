/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.CheckRestart;
import io.nomadproject.client.models.ConsulConnect;
import io.nomadproject.client.models.ServiceCheck;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * Service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Service {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADDRESS_MODE = "AddressMode";
  @SerializedName(SERIALIZED_NAME_ADDRESS_MODE)
  private String addressMode;

  public static final String SERIALIZED_NAME_CANARY_META = "CanaryMeta";
  @SerializedName(SERIALIZED_NAME_CANARY_META)
  private Map<String, String> canaryMeta = null;

  public static final String SERIALIZED_NAME_CANARY_TAGS = "CanaryTags";
  @SerializedName(SERIALIZED_NAME_CANARY_TAGS)
  private List<String> canaryTags = null;

  public static final String SERIALIZED_NAME_CHECK_RESTART = "CheckRestart";
  @SerializedName(SERIALIZED_NAME_CHECK_RESTART)
  private CheckRestart checkRestart;

  public static final String SERIALIZED_NAME_CHECKS = "Checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<ServiceCheck> checks = null;

  public static final String SERIALIZED_NAME_CONNECT = "Connect";
  @SerializedName(SERIALIZED_NAME_CONNECT)
  private ConsulConnect connect;

  public static final String SERIALIZED_NAME_ENABLE_TAG_OVERRIDE = "EnableTagOverride";
  @SerializedName(SERIALIZED_NAME_ENABLE_TAG_OVERRIDE)
  private Boolean enableTagOverride;

  public static final String SERIALIZED_NAME_META = "Meta";
  @SerializedName(SERIALIZED_NAME_META)
  private Map<String, String> meta = null;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_UPDATE = "OnUpdate";
  @SerializedName(SERIALIZED_NAME_ON_UPDATE)
  private String onUpdate;

  public static final String SERIALIZED_NAME_PORT_LABEL = "PortLabel";
  @SerializedName(SERIALIZED_NAME_PORT_LABEL)
  private String portLabel;

  public static final String SERIALIZED_NAME_PROVIDER = "Provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TASK_NAME = "TaskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public Service() { 
  }

  public Service address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public Service addressMode(String addressMode) {
    
    this.addressMode = addressMode;
    return this;
  }

   /**
   * Get addressMode
   * @return addressMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddressMode() {
    return addressMode;
  }


  public void setAddressMode(String addressMode) {
    this.addressMode = addressMode;
  }


  public Service canaryMeta(Map<String, String> canaryMeta) {
    
    this.canaryMeta = canaryMeta;
    return this;
  }

  public Service putCanaryMetaItem(String key, String canaryMetaItem) {
    if (this.canaryMeta == null) {
      this.canaryMeta = new HashMap<>();
    }
    this.canaryMeta.put(key, canaryMetaItem);
    return this;
  }

   /**
   * Get canaryMeta
   * @return canaryMeta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getCanaryMeta() {
    return canaryMeta;
  }


  public void setCanaryMeta(Map<String, String> canaryMeta) {
    this.canaryMeta = canaryMeta;
  }


  public Service canaryTags(List<String> canaryTags) {
    
    this.canaryTags = canaryTags;
    return this;
  }

  public Service addCanaryTagsItem(String canaryTagsItem) {
    if (this.canaryTags == null) {
      this.canaryTags = new ArrayList<>();
    }
    this.canaryTags.add(canaryTagsItem);
    return this;
  }

   /**
   * Get canaryTags
   * @return canaryTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCanaryTags() {
    return canaryTags;
  }


  public void setCanaryTags(List<String> canaryTags) {
    this.canaryTags = canaryTags;
  }


  public Service checkRestart(CheckRestart checkRestart) {
    
    this.checkRestart = checkRestart;
    return this;
  }

   /**
   * Get checkRestart
   * @return checkRestart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckRestart getCheckRestart() {
    return checkRestart;
  }


  public void setCheckRestart(CheckRestart checkRestart) {
    this.checkRestart = checkRestart;
  }


  public Service checks(List<ServiceCheck> checks) {
    
    this.checks = checks;
    return this;
  }

  public Service addChecksItem(ServiceCheck checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ServiceCheck> getChecks() {
    return checks;
  }


  public void setChecks(List<ServiceCheck> checks) {
    this.checks = checks;
  }


  public Service connect(ConsulConnect connect) {
    
    this.connect = connect;
    return this;
  }

   /**
   * Get connect
   * @return connect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConsulConnect getConnect() {
    return connect;
  }


  public void setConnect(ConsulConnect connect) {
    this.connect = connect;
  }


  public Service enableTagOverride(Boolean enableTagOverride) {
    
    this.enableTagOverride = enableTagOverride;
    return this;
  }

   /**
   * Get enableTagOverride
   * @return enableTagOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnableTagOverride() {
    return enableTagOverride;
  }


  public void setEnableTagOverride(Boolean enableTagOverride) {
    this.enableTagOverride = enableTagOverride;
  }


  public Service meta(Map<String, String> meta) {
    
    this.meta = meta;
    return this;
  }

  public Service putMetaItem(String key, String metaItem) {
    if (this.meta == null) {
      this.meta = new HashMap<>();
    }
    this.meta.put(key, metaItem);
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getMeta() {
    return meta;
  }


  public void setMeta(Map<String, String> meta) {
    this.meta = meta;
  }


  public Service name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Service onUpdate(String onUpdate) {
    
    this.onUpdate = onUpdate;
    return this;
  }

   /**
   * Get onUpdate
   * @return onUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOnUpdate() {
    return onUpdate;
  }


  public void setOnUpdate(String onUpdate) {
    this.onUpdate = onUpdate;
  }


  public Service portLabel(String portLabel) {
    
    this.portLabel = portLabel;
    return this;
  }

   /**
   * Get portLabel
   * @return portLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPortLabel() {
    return portLabel;
  }


  public void setPortLabel(String portLabel) {
    this.portLabel = portLabel;
  }


  public Service provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    this.provider = provider;
  }


  public Service tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public Service addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Service taskName(String taskName) {
    
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaskName() {
    return taskName;
  }


  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.address, service.address) &&
        Objects.equals(this.addressMode, service.addressMode) &&
        Objects.equals(this.canaryMeta, service.canaryMeta) &&
        Objects.equals(this.canaryTags, service.canaryTags) &&
        Objects.equals(this.checkRestart, service.checkRestart) &&
        Objects.equals(this.checks, service.checks) &&
        Objects.equals(this.connect, service.connect) &&
        Objects.equals(this.enableTagOverride, service.enableTagOverride) &&
        Objects.equals(this.meta, service.meta) &&
        Objects.equals(this.name, service.name) &&
        Objects.equals(this.onUpdate, service.onUpdate) &&
        Objects.equals(this.portLabel, service.portLabel) &&
        Objects.equals(this.provider, service.provider) &&
        Objects.equals(this.tags, service.tags) &&
        Objects.equals(this.taskName, service.taskName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, addressMode, canaryMeta, canaryTags, checkRestart, checks, connect, enableTagOverride, meta, name, onUpdate, portLabel, provider, tags, taskName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    addressMode: ").append(toIndentedString(addressMode)).append("\n");
    sb.append("    canaryMeta: ").append(toIndentedString(canaryMeta)).append("\n");
    sb.append("    canaryTags: ").append(toIndentedString(canaryTags)).append("\n");
    sb.append("    checkRestart: ").append(toIndentedString(checkRestart)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    connect: ").append(toIndentedString(connect)).append("\n");
    sb.append("    enableTagOverride: ").append(toIndentedString(enableTagOverride)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onUpdate: ").append(toIndentedString(onUpdate)).append("\n");
    sb.append("    portLabel: ").append(toIndentedString(portLabel)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("AddressMode");
    openapiFields.add("CanaryMeta");
    openapiFields.add("CanaryTags");
    openapiFields.add("CheckRestart");
    openapiFields.add("Checks");
    openapiFields.add("Connect");
    openapiFields.add("EnableTagOverride");
    openapiFields.add("Meta");
    openapiFields.add("Name");
    openapiFields.add("OnUpdate");
    openapiFields.add("PortLabel");
    openapiFields.add("Provider");
    openapiFields.add("Tags");
    openapiFields.add("TaskName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Service
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Service.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address").toString()));
      }
      if (jsonObj.get("AddressMode") != null && !jsonObj.get("AddressMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressMode").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("CanaryTags") != null && !jsonObj.get("CanaryTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CanaryTags` to be an array in the JSON string but got `%s`", jsonObj.get("CanaryTags").toString()));
      }
      // validate the optional field `CheckRestart`
      if (jsonObj.getAsJsonObject("CheckRestart") != null) {
        CheckRestart.validateJsonObject(jsonObj.getAsJsonObject("CheckRestart"));
      }
      JsonArray jsonArraychecks = jsonObj.getAsJsonArray("Checks");
      if (jsonArraychecks != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Checks").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Checks` to be an array in the JSON string but got `%s`", jsonObj.get("Checks").toString()));
        }

        // validate the optional field `Checks` (array)
        for (int i = 0; i < jsonArraychecks.size(); i++) {
          ServiceCheck.validateJsonObject(jsonArraychecks.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `Connect`
      if (jsonObj.getAsJsonObject("Connect") != null) {
        ConsulConnect.validateJsonObject(jsonObj.getAsJsonObject("Connect"));
      }
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("OnUpdate") != null && !jsonObj.get("OnUpdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OnUpdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OnUpdate").toString()));
      }
      if (jsonObj.get("PortLabel") != null && !jsonObj.get("PortLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PortLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PortLabel").toString()));
      }
      if (jsonObj.get("Provider") != null && !jsonObj.get("Provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Provider").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
      }
      if (jsonObj.get("TaskName") != null && !jsonObj.get("TaskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Service given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Service
  * @throws IOException if the JSON string is invalid with respect to Service
  */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

 /**
  * Convert an instance of Service to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

