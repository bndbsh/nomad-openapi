/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.NodeReservedCpuResources;
import io.nomadproject.client.models.NodeReservedDiskResources;
import io.nomadproject.client.models.NodeReservedMemoryResources;
import io.nomadproject.client.models.NodeReservedNetworkResources;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * NodeReservedResources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NodeReservedResources {
  public static final String SERIALIZED_NAME_CPU = "Cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private NodeReservedCpuResources cpu;

  public static final String SERIALIZED_NAME_DISK = "Disk";
  @SerializedName(SERIALIZED_NAME_DISK)
  private NodeReservedDiskResources disk;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private NodeReservedMemoryResources memory;

  public static final String SERIALIZED_NAME_NETWORKS = "Networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private NodeReservedNetworkResources networks;

  public NodeReservedResources() { 
  }

  public NodeReservedResources cpu(NodeReservedCpuResources cpu) {
    
    this.cpu = cpu;
    return this;
  }

   /**
   * Get cpu
   * @return cpu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeReservedCpuResources getCpu() {
    return cpu;
  }


  public void setCpu(NodeReservedCpuResources cpu) {
    this.cpu = cpu;
  }


  public NodeReservedResources disk(NodeReservedDiskResources disk) {
    
    this.disk = disk;
    return this;
  }

   /**
   * Get disk
   * @return disk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeReservedDiskResources getDisk() {
    return disk;
  }


  public void setDisk(NodeReservedDiskResources disk) {
    this.disk = disk;
  }


  public NodeReservedResources memory(NodeReservedMemoryResources memory) {
    
    this.memory = memory;
    return this;
  }

   /**
   * Get memory
   * @return memory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeReservedMemoryResources getMemory() {
    return memory;
  }


  public void setMemory(NodeReservedMemoryResources memory) {
    this.memory = memory;
  }


  public NodeReservedResources networks(NodeReservedNetworkResources networks) {
    
    this.networks = networks;
    return this;
  }

   /**
   * Get networks
   * @return networks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeReservedNetworkResources getNetworks() {
    return networks;
  }


  public void setNetworks(NodeReservedNetworkResources networks) {
    this.networks = networks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeReservedResources nodeReservedResources = (NodeReservedResources) o;
    return Objects.equals(this.cpu, nodeReservedResources.cpu) &&
        Objects.equals(this.disk, nodeReservedResources.disk) &&
        Objects.equals(this.memory, nodeReservedResources.memory) &&
        Objects.equals(this.networks, nodeReservedResources.networks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpu, disk, memory, networks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeReservedResources {\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Cpu");
    openapiFields.add("Disk");
    openapiFields.add("Memory");
    openapiFields.add("Networks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NodeReservedResources
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (NodeReservedResources.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeReservedResources is not found in the empty JSON string", NodeReservedResources.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NodeReservedResources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeReservedResources` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `Cpu`
      if (jsonObj.getAsJsonObject("Cpu") != null) {
        NodeReservedCpuResources.validateJsonObject(jsonObj.getAsJsonObject("Cpu"));
      }
      // validate the optional field `Disk`
      if (jsonObj.getAsJsonObject("Disk") != null) {
        NodeReservedDiskResources.validateJsonObject(jsonObj.getAsJsonObject("Disk"));
      }
      // validate the optional field `Memory`
      if (jsonObj.getAsJsonObject("Memory") != null) {
        NodeReservedMemoryResources.validateJsonObject(jsonObj.getAsJsonObject("Memory"));
      }
      // validate the optional field `Networks`
      if (jsonObj.getAsJsonObject("Networks") != null) {
        NodeReservedNetworkResources.validateJsonObject(jsonObj.getAsJsonObject("Networks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeReservedResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeReservedResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeReservedResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeReservedResources.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeReservedResources>() {
           @Override
           public void write(JsonWriter out, NodeReservedResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeReservedResources read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NodeReservedResources given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NodeReservedResources
  * @throws IOException if the JSON string is invalid with respect to NodeReservedResources
  */
  public static NodeReservedResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeReservedResources.class);
  }

 /**
  * Convert an instance of NodeReservedResources to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

