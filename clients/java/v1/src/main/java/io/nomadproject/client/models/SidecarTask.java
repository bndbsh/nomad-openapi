/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.LogConfig;
import io.nomadproject.client.models.Resources;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * SidecarTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SidecarTask {
  public static final String SERIALIZED_NAME_CONFIG = "Config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Map<String, Object> config = null;

  public static final String SERIALIZED_NAME_DRIVER = "Driver";
  @SerializedName(SERIALIZED_NAME_DRIVER)
  private String driver;

  public static final String SERIALIZED_NAME_ENV = "Env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private Map<String, String> env = null;

  public static final String SERIALIZED_NAME_KILL_SIGNAL = "KillSignal";
  @SerializedName(SERIALIZED_NAME_KILL_SIGNAL)
  private String killSignal;

  public static final String SERIALIZED_NAME_KILL_TIMEOUT = "KillTimeout";
  @SerializedName(SERIALIZED_NAME_KILL_TIMEOUT)
  private Long killTimeout;

  public static final String SERIALIZED_NAME_LOG_CONFIG = "LogConfig";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIG)
  private LogConfig logConfig;

  public static final String SERIALIZED_NAME_META = "Meta";
  @SerializedName(SERIALIZED_NAME_META)
  private Map<String, String> meta = null;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private Resources resources;

  public static final String SERIALIZED_NAME_SHUTDOWN_DELAY = "ShutdownDelay";
  @SerializedName(SERIALIZED_NAME_SHUTDOWN_DELAY)
  private Long shutdownDelay;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public SidecarTask() { 
  }

  public SidecarTask config(Map<String, Object> config) {
    
    this.config = config;
    return this;
  }

  public SidecarTask putConfigItem(String key, Object configItem) {
    if (this.config == null) {
      this.config = new HashMap<>();
    }
    this.config.put(key, configItem);
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getConfig() {
    return config;
  }


  public void setConfig(Map<String, Object> config) {
    this.config = config;
  }


  public SidecarTask driver(String driver) {
    
    this.driver = driver;
    return this;
  }

   /**
   * Get driver
   * @return driver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDriver() {
    return driver;
  }


  public void setDriver(String driver) {
    this.driver = driver;
  }


  public SidecarTask env(Map<String, String> env) {
    
    this.env = env;
    return this;
  }

  public SidecarTask putEnvItem(String key, String envItem) {
    if (this.env == null) {
      this.env = new HashMap<>();
    }
    this.env.put(key, envItem);
    return this;
  }

   /**
   * Get env
   * @return env
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getEnv() {
    return env;
  }


  public void setEnv(Map<String, String> env) {
    this.env = env;
  }


  public SidecarTask killSignal(String killSignal) {
    
    this.killSignal = killSignal;
    return this;
  }

   /**
   * Get killSignal
   * @return killSignal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getKillSignal() {
    return killSignal;
  }


  public void setKillSignal(String killSignal) {
    this.killSignal = killSignal;
  }


  public SidecarTask killTimeout(Long killTimeout) {
    
    this.killTimeout = killTimeout;
    return this;
  }

   /**
   * Get killTimeout
   * @return killTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getKillTimeout() {
    return killTimeout;
  }


  public void setKillTimeout(Long killTimeout) {
    this.killTimeout = killTimeout;
  }


  public SidecarTask logConfig(LogConfig logConfig) {
    
    this.logConfig = logConfig;
    return this;
  }

   /**
   * Get logConfig
   * @return logConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogConfig getLogConfig() {
    return logConfig;
  }


  public void setLogConfig(LogConfig logConfig) {
    this.logConfig = logConfig;
  }


  public SidecarTask meta(Map<String, String> meta) {
    
    this.meta = meta;
    return this;
  }

  public SidecarTask putMetaItem(String key, String metaItem) {
    if (this.meta == null) {
      this.meta = new HashMap<>();
    }
    this.meta.put(key, metaItem);
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getMeta() {
    return meta;
  }


  public void setMeta(Map<String, String> meta) {
    this.meta = meta;
  }


  public SidecarTask name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SidecarTask resources(Resources resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Resources getResources() {
    return resources;
  }


  public void setResources(Resources resources) {
    this.resources = resources;
  }


  public SidecarTask shutdownDelay(Long shutdownDelay) {
    
    this.shutdownDelay = shutdownDelay;
    return this;
  }

   /**
   * Get shutdownDelay
   * @return shutdownDelay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getShutdownDelay() {
    return shutdownDelay;
  }


  public void setShutdownDelay(Long shutdownDelay) {
    this.shutdownDelay = shutdownDelay;
  }


  public SidecarTask user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SidecarTask sidecarTask = (SidecarTask) o;
    return Objects.equals(this.config, sidecarTask.config) &&
        Objects.equals(this.driver, sidecarTask.driver) &&
        Objects.equals(this.env, sidecarTask.env) &&
        Objects.equals(this.killSignal, sidecarTask.killSignal) &&
        Objects.equals(this.killTimeout, sidecarTask.killTimeout) &&
        Objects.equals(this.logConfig, sidecarTask.logConfig) &&
        Objects.equals(this.meta, sidecarTask.meta) &&
        Objects.equals(this.name, sidecarTask.name) &&
        Objects.equals(this.resources, sidecarTask.resources) &&
        Objects.equals(this.shutdownDelay, sidecarTask.shutdownDelay) &&
        Objects.equals(this.user, sidecarTask.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, driver, env, killSignal, killTimeout, logConfig, meta, name, resources, shutdownDelay, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SidecarTask {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    killSignal: ").append(toIndentedString(killSignal)).append("\n");
    sb.append("    killTimeout: ").append(toIndentedString(killTimeout)).append("\n");
    sb.append("    logConfig: ").append(toIndentedString(logConfig)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    shutdownDelay: ").append(toIndentedString(shutdownDelay)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Config");
    openapiFields.add("Driver");
    openapiFields.add("Env");
    openapiFields.add("KillSignal");
    openapiFields.add("KillTimeout");
    openapiFields.add("LogConfig");
    openapiFields.add("Meta");
    openapiFields.add("Name");
    openapiFields.add("Resources");
    openapiFields.add("ShutdownDelay");
    openapiFields.add("User");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SidecarTask
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SidecarTask.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SidecarTask is not found in the empty JSON string", SidecarTask.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SidecarTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SidecarTask` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Driver") != null && !jsonObj.get("Driver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Driver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Driver").toString()));
      }
      if (jsonObj.get("KillSignal") != null && !jsonObj.get("KillSignal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KillSignal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KillSignal").toString()));
      }
      // validate the optional field `LogConfig`
      if (jsonObj.getAsJsonObject("LogConfig") != null) {
        LogConfig.validateJsonObject(jsonObj.getAsJsonObject("LogConfig"));
      }
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Resources`
      if (jsonObj.getAsJsonObject("Resources") != null) {
        Resources.validateJsonObject(jsonObj.getAsJsonObject("Resources"));
      }
      if (jsonObj.get("User") != null && !jsonObj.get("User").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `User` to be a primitive type in the JSON string but got `%s`", jsonObj.get("User").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SidecarTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SidecarTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SidecarTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SidecarTask.class));

       return (TypeAdapter<T>) new TypeAdapter<SidecarTask>() {
           @Override
           public void write(JsonWriter out, SidecarTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SidecarTask read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SidecarTask given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SidecarTask
  * @throws IOException if the JSON string is invalid with respect to SidecarTask
  */
  public static SidecarTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SidecarTask.class);
  }

 /**
  * Convert an instance of SidecarTask to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

