/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nomadproject.client.models.ServerHealth;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * OperatorHealthReply
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OperatorHealthReply {
  public static final String SERIALIZED_NAME_FAILURE_TOLERANCE = "FailureTolerance";
  @SerializedName(SERIALIZED_NAME_FAILURE_TOLERANCE)
  private Integer failureTolerance;

  public static final String SERIALIZED_NAME_HEALTHY = "Healthy";
  @SerializedName(SERIALIZED_NAME_HEALTHY)
  private Boolean healthy;

  public static final String SERIALIZED_NAME_SERVERS = "Servers";
  @SerializedName(SERIALIZED_NAME_SERVERS)
  private List<ServerHealth> servers = null;

  public OperatorHealthReply() { 
  }

  public OperatorHealthReply failureTolerance(Integer failureTolerance) {
    
    this.failureTolerance = failureTolerance;
    return this;
  }

   /**
   * Get failureTolerance
   * @return failureTolerance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFailureTolerance() {
    return failureTolerance;
  }


  public void setFailureTolerance(Integer failureTolerance) {
    this.failureTolerance = failureTolerance;
  }


  public OperatorHealthReply healthy(Boolean healthy) {
    
    this.healthy = healthy;
    return this;
  }

   /**
   * Get healthy
   * @return healthy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHealthy() {
    return healthy;
  }


  public void setHealthy(Boolean healthy) {
    this.healthy = healthy;
  }


  public OperatorHealthReply servers(List<ServerHealth> servers) {
    
    this.servers = servers;
    return this;
  }

  public OperatorHealthReply addServersItem(ServerHealth serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<>();
    }
    this.servers.add(serversItem);
    return this;
  }

   /**
   * Get servers
   * @return servers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ServerHealth> getServers() {
    return servers;
  }


  public void setServers(List<ServerHealth> servers) {
    this.servers = servers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperatorHealthReply operatorHealthReply = (OperatorHealthReply) o;
    return Objects.equals(this.failureTolerance, operatorHealthReply.failureTolerance) &&
        Objects.equals(this.healthy, operatorHealthReply.healthy) &&
        Objects.equals(this.servers, operatorHealthReply.servers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failureTolerance, healthy, servers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperatorHealthReply {\n");
    sb.append("    failureTolerance: ").append(toIndentedString(failureTolerance)).append("\n");
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FailureTolerance");
    openapiFields.add("Healthy");
    openapiFields.add("Servers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OperatorHealthReply
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OperatorHealthReply.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperatorHealthReply is not found in the empty JSON string", OperatorHealthReply.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OperatorHealthReply.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperatorHealthReply` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayservers = jsonObj.getAsJsonArray("Servers");
      if (jsonArrayservers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Servers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Servers` to be an array in the JSON string but got `%s`", jsonObj.get("Servers").toString()));
        }

        // validate the optional field `Servers` (array)
        for (int i = 0; i < jsonArrayservers.size(); i++) {
          ServerHealth.validateJsonObject(jsonArrayservers.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperatorHealthReply.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperatorHealthReply' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperatorHealthReply> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperatorHealthReply.class));

       return (TypeAdapter<T>) new TypeAdapter<OperatorHealthReply>() {
           @Override
           public void write(JsonWriter out, OperatorHealthReply value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperatorHealthReply read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OperatorHealthReply given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OperatorHealthReply
  * @throws IOException if the JSON string is invalid with respect to OperatorHealthReply
  */
  public static OperatorHealthReply fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperatorHealthReply.class);
  }

 /**
  * Convert an instance of OperatorHealthReply to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

