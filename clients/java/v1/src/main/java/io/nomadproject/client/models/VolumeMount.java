/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.nomadproject.client.JSON;

/**
 * VolumeMount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VolumeMount {
  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_PROPAGATION_MODE = "PropagationMode";
  @SerializedName(SERIALIZED_NAME_PROPAGATION_MODE)
  private String propagationMode;

  public static final String SERIALIZED_NAME_READ_ONLY = "ReadOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_VOLUME = "Volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private String volume;

  public VolumeMount() { 
  }

  public VolumeMount destination(String destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDestination() {
    return destination;
  }


  public void setDestination(String destination) {
    this.destination = destination;
  }


  public VolumeMount propagationMode(String propagationMode) {
    
    this.propagationMode = propagationMode;
    return this;
  }

   /**
   * Get propagationMode
   * @return propagationMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPropagationMode() {
    return propagationMode;
  }


  public void setPropagationMode(String propagationMode) {
    this.propagationMode = propagationMode;
  }


  public VolumeMount readOnly(Boolean readOnly) {
    
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getReadOnly() {
    return readOnly;
  }


  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public VolumeMount volume(String volume) {
    
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVolume() {
    return volume;
  }


  public void setVolume(String volume) {
    this.volume = volume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeMount volumeMount = (VolumeMount) o;
    return Objects.equals(this.destination, volumeMount.destination) &&
        Objects.equals(this.propagationMode, volumeMount.propagationMode) &&
        Objects.equals(this.readOnly, volumeMount.readOnly) &&
        Objects.equals(this.volume, volumeMount.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, propagationMode, readOnly, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeMount {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    propagationMode: ").append(toIndentedString(propagationMode)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Destination");
    openapiFields.add("PropagationMode");
    openapiFields.add("ReadOnly");
    openapiFields.add("Volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VolumeMount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (VolumeMount.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeMount is not found in the empty JSON string", VolumeMount.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VolumeMount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeMount` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Destination").toString()));
      }
      if (jsonObj.get("PropagationMode") != null && !jsonObj.get("PropagationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropagationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropagationMode").toString()));
      }
      if (jsonObj.get("Volume") != null && !jsonObj.get("Volume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Volume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Volume").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeMount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeMount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeMount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeMount.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeMount>() {
           @Override
           public void write(JsonWriter out, VolumeMount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeMount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VolumeMount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VolumeMount
  * @throws IOException if the JSON string is invalid with respect to VolumeMount
  */
  public static VolumeMount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeMount.class);
  }

 /**
  * Convert an instance of VolumeMount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

